{"version":3,"sources":["Graph.js","Components/Help.js","Components/Settings.js","App.js","index.js","constants.js"],"names":["Graph","insight","siblingGroup","extractor","measureLabel","dimensions","set","data","result","labels","Object","entries","key","value","push","generateData","resultSet","datasets","label","backgroundColor","borderColor","borderWidth","options","className","insightType","map","sg","title","length","dimension","Help","href","target","rel","aria-hidden","Settings","ports","setPorts","credentials","setCredentials","useState","settings","setSettings","localCredentials","setLocalCredentials","setPort","e","preventDefault","newSettings","name","setCredential","setting","toString","type","onChange","onClick","localStorage","setItem","JSON","stringify","window","location","reload","App","druidRunning","setDruidRunning","bypassDruid","setBypassDruid","openDialog","setOpenDialog","parse","getItem","Broker","Router","username","password","getHeadersWithCredentials","headers","aggregators","defaultExtractors","defaultInsightTypes","filterTypes","MainBody","dataSources","setDataSources","columns","setColumns","datasource","ordinal","measureColumn","k","t","aggregator","extractors","insightTypes","filters","setOptions","isExecuting","setIsExecuting","setDimensions","insights","setInsights","numberOfRows","setNumberOfRows","selectedInsight","setSelectedInsight","loadedInsights","setLoadedInsights","loadInsights","rows","setOption","setNumericOption","parseInt","toggleColumn","newColumns","newOrdinal","checked","index","indexOf","splice","ordinalIndex","toggleOrdinal","setFilter","split","id","Number","newFilters","setFilterValue","addFilterValue","removeFilter","useEffect","axios","get","params","broker","then","res","catch","err","console","log","Array","isArray","column","__timeColumns","flat","downloadFile","a","myData","fileName","Date","now","json","blob","Blob","URL","createObjectURL","link","document","createElement","download","body","appendChild","click","removeChild","showFile","reader","FileReader","onload","readAsText","files","dataSource","includes","htmlFor","filter","Fragment","val","key2","style","pointerEvents","alert","post","router","response","message","display","justifyContent","alignItems","marginBottom","margin","getElementById","flexShrink","subspace","forEach","dim","extractorString","string","comma","ex","extractorSign","extractorToString","changeSelectedInsight","Math","round","toFixed","ErrorMessage","WindowComponent","children","marginRight","ReactDOM","render","StrictMode","exports","__timeColumnsFunctions","timestamp","getFullYear","getMonth","getDate","getDay","getHours","getMinutes","getSeconds"],"mappings":"oTA2EeA,MAxEf,YAA8E,IAA9DC,EAA6D,EAA7DA,QAASC,EAAoD,EAApDA,aAAcC,EAAsC,EAAtCA,UAAWC,EAA2B,EAA3BA,aAAcC,EAAa,EAAbA,WAUtDC,EARN,SAAsBC,GAElB,IADA,IAAIC,EAAS,CAACC,OAAQ,GAAIF,KAAM,IAChC,MAA0BG,OAAOC,QAAQJ,GAAzC,eAA+C,CAA3C,0BAAOK,EAAP,KAAYC,EAAZ,KACAL,EAAOC,OAAOK,KAAKF,GACnBJ,EAAOD,KAAKO,KAAKD,GAErB,OAAOL,EAECO,CAAad,EAAQe,WAG3BT,EAAO,CACTE,OAAQH,EAAIG,OACZQ,SAAU,CACN,CACIC,MAAOd,EACPG,KAAMD,EAAIC,KACVY,gBAAiB,CACb,0BACA,0BACA,0BACA,0BACA,2BACA,2BAEJC,YAAa,CACT,wBACA,wBACA,wBACA,wBACA,yBACA,yBAEJC,YAAa,KAKnBC,EAAU,GAgBhB,OACI,sBAAKC,UAAU,iBAAf,UACI,wCAAWtB,EAAQuB,eACnB,oDAAuB,IAAKtB,EAAauB,KAAI,SAACC,EAAId,GAC9C,OAAQ,sBAAMe,MAAOD,EAAGC,MAAhB,SAAkCD,EAAGb,OAASD,IAAQV,EAAa0B,OAAQ,EAAI,GAAK,MAAxDhB,MACpC,IAFJ,KAEWP,EAAWJ,EAAQ4B,WAF9B,OAGA,6CAAgB1B,KAChB,yCAAYF,EAAQY,SACpB,qBAAKU,UAAU,iBAAf,SAnBuB,UAAxBtB,EAAQuB,YAEH,cAAC,IAAD,CAAMD,UAAU,YAAYhB,KAAMA,EAAMe,QAASA,IAIjD,cAAC,IAAD,CAAKf,KAAMA,EAAMe,QAASA,UCuB3BQ,MA3Ef,WACI,OACI,sBAAKP,UAAU,sBAAf,UACI,sCACA,uFACA,uCACA,qGAEgC,mBAAGQ,KAAK,iDAAiDC,OAAO,SAC7DC,IAAI,aADP,sBAGhC,yDACA,iFACoD,uBADpD,sGAGI,uBAHJ,2BAI4B,uBAJ5B,iCAKkC,uBALlC,sCAMuC,uBANvC,iCAOkC,uBAPlC,aAQc,mBAAGV,UAAU,YAAYW,cAAY,SARnD,8CAUA,4CACA,+BACI,+BACI,iDADJ,yHAKA,+BACI,gDADJ,yHAG6B,uBAH7B,uIAOA,+BACI,gDADJ,mDAIA,+BACI,+CADJ,6DAIA,+BACI,8CADJ,yFAIA,+BACI,qDADJ,4EAIA,+BACI,4CADJ,6CAIA,+BACI,+CADJ,uCAIA,+BACI,yCADJ,4DAIA,+BACI,sCAAQ,uCAAR,yDACA,sCAAQ,2CAAR,uDA3CR,OA6CQ,uCA7CR,8BA+CA,8DAAgC,6CAAhC,gE,OCVGC,MA3Df,YAAmE,IAAhDC,EAA+C,EAA/CA,MAAOC,EAAwC,EAAxCA,SAAUC,EAA8B,EAA9BA,YAAaC,EAAiB,EAAjBA,eAE7C,EAAgCC,mBAASJ,GAAS,IAAlD,mBAAOK,EAAP,KAAiBC,EAAjB,KACA,EAAgDF,mBAASF,GAAe,IAAxE,mBAAOK,EAAP,KAAyBC,EAAzB,KAEA,SAASC,EAAQC,GACbA,EAAEC,iBACF,IAAMC,EAAW,2BAAOP,GAAP,kBAAkBK,EAAEd,OAAOiB,KAAOH,EAAEd,OAAOnB,QAC5D6B,EAAYM,GAGhB,SAASE,EAAcJ,GACnBA,EAAEC,iBACF,IAAMC,EAAW,2BAAOL,GAAP,kBAA0BG,EAAEd,OAAOiB,KAAOH,EAAEd,OAAOnB,QACpE+B,EAAoBI,GAYxB,OACI,sBAAKzB,UAAU,sBAAf,UACI,0CACA,yDAEIb,OAAOC,QAAQ8B,GAAUhB,KAAI,YAAuB,IAAD,mBAApB0B,EAAoB,KAAXtC,EAAW,KAC/C,OACI,gCACI,+BAAOsC,EAAQC,aACf,uBAAOH,KAAME,EAASE,KAAK,OAAOC,SAAUT,EAAShC,MAAOA,MAFtDsC,MAStB,yDAEIzC,OAAOC,QAAQgC,GAAkBlB,KAAI,YAAuB,IAAD,mBAApB0B,EAAoB,KAAXtC,EAAW,KACvD,OACI,gCACI,+BAAOsC,EAAQC,aACf,uBAAOH,KAAME,EAASE,KAAkB,aAAZF,EAAyB,WAAa,OAAQG,SAAUJ,EAAerC,MAAOA,MAFpGsC,MAQtB,wBAAQI,QArChB,SAAeT,GACXA,EAAEC,iBACFV,EAASI,GACTF,EAAeI,GACfa,aAAaC,QAAQ,QAASC,KAAKC,UAAUlB,IAC7Ce,aAAaC,QAAQ,cAAeC,KAAKC,UAAUhB,IACnDiB,OAAOC,SAASC,UA+BZ,uB,QC6lBGC,MA9oBf,WAEI,MAAwCvB,oBAAS,GAAjD,mBAAOwB,EAAP,KAAqBC,EAArB,KACA,EAAsCzB,oBAAS,GAA/C,mBAAO0B,EAAP,KAAoBC,EAApB,KACA,EAAoC3B,mBAAS,GAA7C,mBAAO4B,EAAP,KAAmBC,EAAnB,KACA,EAA0B7B,mBAASkB,KAAKY,MAAMd,aAAae,QAAQ,WAAa,CAC5EC,OAAQ,wBACRC,OAAQ,0BAFZ,mBAAOrC,EAAP,KAAcC,EAAd,KAIA,EAAsCG,mBAASkB,KAAKY,MAAMd,aAAae,QAAQ,iBAAmB,CAC9FG,SAAU,GACVC,SAAU,KAFd,mBAAOrC,EAAP,KAAoBC,EAApB,KAIMqC,EAA4B,WAC9B,IAAMC,EAAU,GAKhB,OAJIvC,EAAYoC,UAAYpC,EAAYqC,WACpCE,EAAQH,SAAWpC,EAAYoC,SAC/BG,EAAQF,SAAWrC,EAAYqC,UAE5BE,GAGLC,EAAc,CAAC,MAAO,QAAS,QAC/BC,EAAoB,CACtB,8BACA,gBACA,sBACA,8BAEEC,EAAsB,CACxB,QACA,QACA,cACA,YACA,aAEEC,EAAc,CAChB,SACA,cAGJ,SAASC,IACL,MAAsC1C,mBAAS,IAA/C,mBAAO2C,EAAP,KAAoBC,EAApB,KACA,EAA8B5C,mBAAS,IAAvC,mBAAO6C,EAAP,KAAgBC,EAAhB,KACA,EAA8B9C,mBAAS,CACnC+C,WAAY,GACZF,QAAS,GACTG,QAAS,GACTC,cAAe,GACfC,EAAG,EACHC,EAAG,EACHC,WAAYd,EAAY,GACxBe,WAAW,GAAD,OAAMd,GAChBe,aAAa,GAAD,OAAMd,GAClBe,QAAS,KAVb,mBAAOzE,EAAP,KAAgB0E,EAAhB,KAYA,EAAsCxD,oBAAS,GAA/C,mBAAOyD,EAAP,KAAoBC,EAApB,KACA,EAAoC1D,mBAAS,IAA7C,mBAAOnC,EAAP,KAAmB8F,EAAnB,KACA,EAAgC3D,mBAAS,IAAzC,mBAAO4D,EAAP,KAAiBC,EAAjB,KACA,EAAwC7D,oBAAU,GAAlD,mBAAO8D,EAAP,KAAqBC,EAArB,KACA,EAA8C/D,oBAAU,GAAxD,mBAAOgE,EAAP,KAAwBC,EAAxB,KACA,EAA4CjE,oBAAS,GAArD,mBAAOkE,EAAP,KAAuBC,GAAvB,KAEA,SAASC,GAAarG,GAClB,MAAuDmD,KAAKY,MAAM/D,EAAK6C,YAAhEiC,EAAP,EAAOA,QAAS/D,EAAhB,EAAgBA,QAASuF,EAAzB,EAAyBA,KAAMxG,EAA/B,EAA+BA,WAAY+F,EAA3C,EAA2CA,SAC3CO,IAAkB,GAClBrB,EAAWD,GACXW,EAAW1E,GACXiF,EAAgBM,GAChBV,EAAc9F,GACdgG,EAAYD,GAyChB,SAASU,GAAUhE,GACfA,EAAEC,iBACoB,eAAlBD,EAAEd,OAAOiB,MAAyByD,GAClCC,IAAkB,GAEtBX,EAAW,2BAAI1E,GAAL,kBAAewB,EAAEd,OAAOiB,KAAOH,EAAEd,OAAOnB,SAGtD,SAASkG,GAAiBjE,GACtBA,EAAEC,iBACFiD,EAAW,2BAAI1E,GAAL,kBAAewB,EAAEd,OAAOiB,KAAO+D,SAASlE,EAAEd,OAAOnB,UAG/D,SAASoG,GAAanE,GAClB,IAAIoE,EAAa5F,EAAQ+D,QACrB8B,EAAa7F,EAAQkE,QACzB,GAAI1C,EAAEd,OAAOoF,QACTF,EAAWpG,KAAKgC,EAAEd,OAAOnB,WACtB,CACH,IAAMwG,EAAQH,EAAWI,QAAQxE,EAAEd,OAAOnB,OACtCwG,GAAS,GACTH,EAAWK,OAAOF,EAAO,GAE7B,IAAMG,EAAeL,EAAWG,QAAQxE,EAAEd,OAAOnB,OAC7C2G,GAAgB,GAChBL,EAAWI,OAAOC,EAAc,GAGxCxB,EAAW,2BAAI1E,GAAL,IAAc+D,QAAS6B,EAAY1B,QAAS2B,KAG1D,SAASM,GAAc3E,GACnB,IAAIqE,EAAa7F,EAAQwB,EAAEd,OAAOiB,MAClC,GAAIH,EAAEd,OAAOoF,QACTD,EAAWrG,KAAKgC,EAAEd,OAAOnB,WACtB,CACH,IAAM2G,EAAeL,EAAWG,QAAQxE,EAAEd,OAAOnB,OAC7C2G,GAAgB,GAChBL,EAAWI,OAAOC,EAAc,GAGxCxB,EAAW,2BAAI1E,GAAL,kBAAewB,EAAEd,OAAOiB,KAAOkE,KAQ7C,SAASO,GAAU5E,GACfA,EAAEC,iBAEF,IAAME,EAAOH,EAAEd,OAAOiB,KAAK0E,MAAM,KAAK,GAChCC,EAAKC,OAAOb,SAASlE,EAAEd,OAAOiB,KAAK0E,MAAM,KAAK,IAE9CG,EAAU,YAAOxG,EAAQyE,SAC/B+B,EAAWF,GAAI3E,GAAQH,EAAEd,OAAOnB,MAChCmF,EAAW,2BAAI1E,GAAL,IAAcyE,QAAS+B,KAGrC,SAASC,GAAejF,GACpBA,EAAEC,iBAEF,IAAME,EAAO4E,OAAOb,SAASlE,EAAEd,OAAOiB,KAAK0E,MAAM,KAAK,IAChDC,EAAKC,OAAOb,SAASlE,EAAEd,OAAOiB,KAAK0E,MAAM,KAAK,IAE9CG,EAAU,YAAOxG,EAAQyE,SAC/B+B,EAAWF,GAAI/G,MAAMoC,GAAQH,EAAEd,OAAOnB,MACtCmF,EAAW,2BAAI1E,GAAL,IAAcyE,QAAS+B,KAGrC,SAASE,GAAelF,GACpBA,EAAEC,iBACF,IAAM6E,EAAKC,OAAOb,SAASlE,EAAEd,OAAOiB,MAC9BpC,EAAQgH,OAAOb,SAASlE,EAAEd,OAAOnB,OACjCiH,EAAU,YAAOxG,EAAQyE,SAEjB,IAAVlF,EACAiH,EAAWF,GAAI/G,MAAMC,KAAK,IACnBD,EAAQ,GACfiH,EAAWF,GAAI/G,MAAM0G,OAAO1G,EAAO,GAIvCmF,EAAW,2BAAI1E,GAAL,IAAcyE,QAAS+B,KAGrC,SAASG,GAAanF,GAClBA,EAAEC,iBACF,IAAM6E,EAAK9E,EAAEd,OAAO4F,GACdE,EAAU,YAAOxG,EAAQyE,SAC/B+B,EAAWP,OAAOK,EAAI,GACtB5B,EAAW,2BAAI1E,GAAL,IAAcyE,QAAS+B,KAlIrCI,qBAAU,WACNC,IAAMC,IAAI,gBAAiB,CAACC,OAAQ,CAACC,OAAQlG,EAAMoC,QAASK,QAASD,MAChE2D,MAAK,SAAAC,GACFpD,EAAeoD,EAAIjI,SACpBkI,OAAM,SAAAC,GACTzE,GAAgB,GAChB0E,QAAQC,IAAIF,QAEjB,IAEHR,qBAAU,WACN,IAAIxB,EAAJ,CACA,IAAMzD,EAAO3B,EAAQiE,WACrB4C,IAAMC,IAAI,cAAe,CACrBC,OAAQ,CAACC,OAAQlG,EAAMoC,OAAQe,WAAYtC,GAC3C4B,QAASD,MAER2D,MAAK,SAAAC,GACF,GAAIK,MAAMC,QAAQN,EAAIjI,MAAO,CACzB,IAAM8E,EAAUmD,EAAIjI,KAAKkB,KAAI,SAAAsH,GACzB,MAAe,WAAXA,EACOC,gBAEJD,KACRE,OACH3D,EAAWD,QAEXC,EAAW,IAEfU,GAAW,SAAA1E,GACP,OAAO,2BAAIA,GAAX,IAAoB+D,QAAS,GAAIG,QAAS,GAAIC,cAAe,WAGpEgD,OAAM,SAAAC,GACHC,QAAQC,IAAIF,SAErB,CAACpH,EAAQiE,WAAYJ,EAAauB,IAiLrC,IAAMwC,GAAY,uCAAG,sCAAAC,EAAA,sDACXC,EAAS,CACX/D,QAASA,EACT/D,QAASA,EACTuF,KAAMP,EACNjG,WAAYA,EACZ+F,SAAUA,GAERiD,EARW,UAQG/H,EAAQiE,WARX,qBAQkC+D,KAAKC,OAElDC,EAAO9F,KAAKC,UAAUyF,GACtBK,EAAO,IAAIC,KAAK,CAACF,GAAO,CAACnG,KAAM,qBAC/BtB,EAAO4H,IAAIC,gBAAgBH,IAC3BI,EAAOC,SAASC,cAAc,MAC/BhI,KAAOA,EACZ8H,EAAKG,SAAWX,EAAW,QAC3BS,SAASG,KAAKC,YAAYL,GAC1BA,EAAKM,QACLL,SAASG,KAAKG,YAAYP,GAlBT,4CAAH,qDAqBZQ,GAAQ,uCAAG,WAAOvH,GAAP,eAAAqG,EAAA,sDACbrG,EAAEC,kBACIuH,EAAS,IAAIC,YACZC,OAAP,uCAAgB,WAAO1H,GAAP,SAAAqG,EAAA,sDACZvC,GAAa9D,EAAEd,OAAOxB,QADV,2CAAhB,sDAGA8J,EAAOG,WAAW3H,EAAEd,OAAO0I,MAAM,IANpB,2CAAH,sDASd,OACI,sBAAKnJ,UAAU,WAAf,UACI,sBAAKA,UAAU,qBAAf,UACI,mDACA,yBAAQ0B,KAAK,aAAa2E,GAAG,aAAatE,SAAUwD,GAAWjG,MAAOS,EAAQiE,WAA9E,UACI,wBAAQ1E,MAAM,GAAd,mCACCsE,EAAY1D,KAAI,SAACkJ,EAAY/J,GAC1B,OACI,wBAAQC,MAAO8J,EAAf,SACKA,GAD2B/J,SAO5C,sBAAKW,UAAU,eAAf,UACI,kDACA,8CAGgB,IAAnB8D,EAAQzD,QACT,qCACI,uBACA,gEAGJ,+BAEQyD,EAAQ5D,KAAI,SAACsH,EAAQnI,GACjB,OACI,sBAAKW,UAAS,uBAAkBX,EAAM,GAAK,YAA3C,UACI,gCACI,uBAAOyC,KAAK,WAAWC,SAAU2D,GAC1BW,GAAE,iBAAYmB,GACd3B,QAAS9F,EAAQ+D,QAAQuF,SAAS7B,GAClC9F,KAAK,UAAUpC,MAAOkI,IAJjC,OAMI,uBAAO8B,QAAO,iBAAY9B,GAA1B,SAAqCA,OAExCzH,EAAQ+D,QAAQuF,SAAS7B,IAC1B,8BACI,uBAAO1F,KAAK,WAAWC,SAAUmE,GAC1BxE,KAAK,UACLpC,MAAOkI,QAbwCnI,QAuB9E,uBAEA,sBAAMW,UAAU,OAAhB,4BACA,yBAAQ0B,KAAK,gBAAgB2E,GAAG,gBAAgBtE,SAAUwD,GAAWjG,MAAOS,EAAQmE,cAApF,UACI,wBAAQ5E,MAAO,GAAf,wCACCwE,EAAQ5D,KAAI,SAACsH,EAAQnI,GAClB,OACI,wBAAQC,MAAOkI,EAAf,SACKA,GADuBnI,SAQxC,iDACA,uBAAOW,UAAU,GAAG0B,KAAK,IAAII,KAAK,SAASC,SAAUyD,GAAkBlG,MAAOS,EAAQoE,IAEtF,gDACA,uBAAOnE,UAAU,GAAG0B,KAAK,IAAII,KAAK,SAASC,SAAUyD,GAAkBlG,MAAOS,EAAQqE,IAEtF,sBAAMpE,UAAU,OAAhB,iCACA,wBAAQ0B,KAAK,aAAa2E,GAAG,aAAatE,SAAUwD,GAAWjG,MAAOS,EAAQsE,WAA9E,SACKd,EAAYrD,KAAI,SAACsH,EAAQnI,GACtB,OACI,wBAAQC,MAAOkI,EAAf,SACKA,GADuBnI,QAOxC,8CACA,+BAEQmE,EAAkBtD,KAAI,SAACsH,EAAQnI,GAC3B,OACI,qBAAKW,UAAS,UAAKX,EAAM,GAAK,YAA9B,SACI,gCACI,uBAAOyC,KAAK,WAAWC,SAAUmE,GAC1BG,GAAE,mBAAcmB,GAChB3B,QAAS9F,EAAQuE,WAAW+E,SAAS7B,GACrC9F,KAAK,aACLpC,MAAOkI,IALlB,OAOI,uBAAO8B,QAAO,mBAAc9B,GAA5B,SAAuCA,QAREnI,QAejE,uBAEA,iDACA,+BAEQoE,EAAoBvD,KAAI,SAACsH,EAAQnI,GAC7B,OACI,qBAAKW,UAAS,UAAKX,EAAM,GAAK,YAA9B,SACI,gCACI,uBAAOyC,KAAK,WAAWC,SAAUmE,GAC1BG,GAAE,qBAAgBmB,GAClB3B,QAAS9F,EAAQwE,aAAa8E,SAAS7B,GACvC9F,KAAK,eACLpC,MAAOkI,IALlB,OAOI,uBAAO8B,QAAO,qBAAgB9B,GAA9B,SAAyCA,QARAnI,QAejE,uBAEA,2CACA,iCAEQU,EAAQyE,QAAQtE,KAAI,SAACqJ,EAAQlK,GACzB,OACI,eAAC,IAAMmK,SAAP,WACI,+CAAkBnK,EAAM,EAAxB,IAA2B,sBAAMW,UAAU,eAAegC,QAAS0E,GAClCL,GAAIhH,EADV,uBAE3B,sBAAKW,UAAU,kBAAf,UACI,yBAAQ+B,SAAUoE,GAAWzE,KAAI,oBAAerC,GACxCC,MAAOiK,EAAOjJ,UADtB,UAEI,wBAAQhB,MAAO,GAAf,sCACCwE,EAAQ5D,KAAI,SAACsH,EAAQnI,GAClB,OACI,wBAAQC,MAAOkI,EAAf,SACKA,GADuBnI,SAOxC,yBAAQ0C,SAAUoE,GAAWnG,UAAU,aAAa0B,KAAI,eAAUrC,GAC1DC,MAAOiK,EAAOzH,KADtB,UAEI,wBAAQxC,MAAO,GAAf,iCACCoE,EAAYxD,KAAI,SAAC4B,EAAMzC,GACpB,OACI,wBAAQC,MAAOwC,EAAf,SACKA,GADqBzC,YAQtCkK,EAAOjK,MAAMY,KAAI,SAACuJ,EAAKC,GACnB,OACI,sBAAK1J,UAAU,uBAAf,UACI,uBAAOA,UAAU,cAAc0B,KAAI,UAAKgI,EAAL,YAAarK,GACzC0C,SAAUyE,GACVlH,MAAOmK,IAEM,WAAhBF,EAAOzH,OAA+B,IAAT4H,EACzB,wBAAQ1J,UAAU,oBAAoBV,MAAOoK,EACrCtJ,MAAM,mBAAmBsB,KAAMrC,EAC/B2C,QAASyE,GAFjB,SAGI,sBAAMkD,MAAO,CAACC,cAAe,QAA7B,iBAGJ,wBACI5J,UAAU,yCACVV,MAAOoK,EAAMtJ,MAAM,sBAAsBsB,KAAMrC,EAC/C2C,QAASyE,GAHb,SAII,sBAAMkD,MAAO,CAACC,cAAe,QAA7B,oBAhB2BF,QA/BtCrK,MA0DjC,wBAAQ2C,QAjWxB,SAAmBT,GACfA,EAAEC,iBACFiD,EAAW,2BAAI1E,GAAL,IAAcyE,QAAQ,GAAD,mBAAMzE,EAAQyE,SAAd,CAAuB,CAAC1C,KAAM,GAAIxB,UAAW,GAAIhB,MAAO,CAAC,WA+VhDc,MAAM,eAAlC,kBAEJ,uBAEA,wBAAQ4B,QAlTC,WACU,KAAvBjC,EAAQiE,WAG0B,IAA3BjE,EAAQ+D,QAAQzD,OAGU,KAA1BN,EAAQmE,cAGRnE,EAAQoE,GAAK,EACpB9B,OAAOwH,MAAM,+BAEN9J,EAAQqE,GAAK,EACpB/B,OAAOwH,MAAM,oCAEwB,IAA9B9J,EAAQuE,WAAWjE,OAGa,IAAhCN,EAAQwE,aAAalE,QAIhCsE,GAAe,GACfiC,IAAMkD,KAAK,OAAQ,CACf/J,QAASA,EACTc,MAAO,CAACkG,OAAQlG,EAAMoC,OAAQ8G,OAAQlJ,EAAMqC,SAC7C,CAACI,QAASD,MACR2D,MAAK,SAAAC,GACFG,QAAQC,IAAIJ,EAAIjI,MAChB2F,GAAe,GACfC,EAAcqC,EAAIjI,KAAKF,YACvBgG,EAAYmC,EAAIjI,KAAKC,QACrB+F,EAAgBiC,EAAIjI,KAAKsG,SAE5B4B,OAAM,SAAAC,GACHC,QAAQC,IAAIF,EAAI6C,SAAShL,KAAKiL,SAC9B5H,OAAOwH,MAAM1C,EAAI6C,SAAShL,KAAKiL,SAC/BtF,GAAe,GACfG,EAAY,QAnBhBzC,OAAOwH,MAAM,mCAHbxH,OAAOwH,MAAM,gCATbxH,OAAOwH,MAAM,wCAHbxH,OAAOwH,MAAM,oCAHbxH,OAAOwH,MAAM,qCAgTT,wBAGJ,sBAAK7J,UAAU,mBAAf,UACK0E,GAAe,yCAChB,qBAAKiF,MAAO,CACRO,QAAS,OAAQC,eAAgB,gBACjCC,WAAY,SAAUC,aAAc,UAFxC,SAKQtF,EAAe,EACX,qCACI,qBAAI4E,MAAO,CAACW,OAAQ,GAApB,uCAAmDvF,KACnD,yBAAQ4E,MAAO,CAACW,OAAQ,GAAItI,QAAS2F,GAArC,UACI,mBAAG3H,UAAU,mBADjB,uBAKJ,qCACI,wBACA,yBAAQ2J,MAAO,CAACW,OAAQ,GAChBtI,QAAS,kBAAMuG,SAASgC,eAAe,YAAY3B,SAD3D,UAEI,mBAAG5I,UAAU,iBAFjB,oBAKA,uBAAO8B,KAAK,OAAOuE,GAAG,WAAWtE,SAAU+G,GAAUa,MAAO,CAACO,QAAS,eAIrFrF,EAASxE,OAAS,GACnB,gCACI,sBAAKL,UAAU,aAAa2J,MAAO,CAACU,aAAc,UAAlD,UACI,sBAAMrK,UAAU,cAAc2J,MAAO,CAACa,WAAY,MAAlD,iBACA,sBAAMxK,UAAU,cAAc2J,MAAO,CAACa,WAAY,MAAlD,0BACA,sBAAMxK,UAAU,cAAhB,2BACA,sBAAMA,UAAU,cAAhB,uBACA,sBAAMA,UAAU,cAAhB,sBAGA6E,EAAS3E,KAAI,SAACxB,EAASW,GACnB,IAAMV,EAAe,GACrBD,EAAQ+L,SAASC,SAAQ,SAACC,EAAKtL,GAC3BV,EAAaY,KAAK,CAACa,MAAOtB,EAAWO,GAAMC,MAAe,OAARqL,EAAe,IAAMA,OAE3E,IAAIC,EAnTF,SAAA5L,GACtB,IAcI6L,EAAS,IAWb,OAVA7L,EAAK0L,SAAQ,SAACnJ,EAAGlC,GACb,IAAIyL,EAAQ,KACRzL,IAAQL,EAAKqB,OAAS,IACtByK,EAAQ,IAGZD,GAAM,WArBY,SAAAE,GAClB,OAAQA,GACJ,IAAK,8BACD,MAAO,aACX,IAAK,gBACD,MAAO,OACX,IAAK,sBACD,MAAO,IACX,IAAK,6BACD,MAAO,YACX,QACI,OAAOA,GAUDC,CAAczJ,EAAEO,MAAxB,aAAkChD,EAAWyC,EAAEjB,WAA/C,YAA6DwK,MAGvED,GAAU,IA0RgCI,CAAkBvM,EAAQE,WAEhD,OACI,eAAC,IAAM4K,SAAP,WACI,sBAAKxJ,UAAU,2BACVgC,QAAS,kBA3R9C,SAA+B3C,GAEvB6F,EADAD,IAAoB5F,GACA,EAEDA,GAuRyB6L,CAAsB7L,IAD1C,UAGI,uBAAMW,UAAU,cAAc2J,MAAO,CAACa,WAAY,MAAlD,UACKnL,EAAM,EADX,OAIA,sBAAMW,UAAU,cAAc2J,MAAO,CAACa,WAAY,MAAlD,SACK9L,EAAQuB,cAGb,uBAAMD,UAAU,cAAhB,gBACQ,IAAKrB,EAAauB,KAAI,SAACC,EAAId,GAC/B,OAAQ,sBAAMe,MAAOD,EAAGC,MAAhB,SAAkCD,EAAGb,OAASD,IAAQV,EAAa0B,OAAQ,EAAI,GAAK,MAAxDhB,MACpC,IAHJ,KAGWP,EAAWJ,EAAQ4B,WAH9B,OAMA,sBAAMN,UAAU,cAAhB,SACK4K,IAGL,sBAAM5K,UAAU,cAAhB,UACMmL,KAAKC,MAAsB,IAAhB1M,EAAQY,OAAe,KAAK+L,QAAQ,QAKrDpG,IAAoB5F,GACpB,cAAC,EAAD,CAAOX,QAASA,EACTC,aAAcA,EACdC,UAAWgM,EACX/L,aAAckB,EAAQmE,cACtBpF,WAAYA,MAjCNO,eA8CrD,SAASiM,EAAT,GAAyC,IAAlB1I,EAAiB,EAAjBA,eACnB,OACI,sBAAK5C,UAAU,eAAf,UACI,sBAAMA,UAAU,mBAAhB,+EAGA,wBAAQA,UAAU,qBAAqBgC,QAAS,kBAAMY,GAAe,IAArE,mCAKZ,SAAS2I,EAAT,GAAsC,IAAZC,EAAW,EAAXA,SACtB,OACI,sBAAKxL,UAAU,eAAf,UACI,qBAAKA,UAAU,6BAA6BgC,QAAS,kBAAMc,EAAc,IAAzE,SACI,mBAAG9C,UAAU,gCAAgCW,cAAY,WAE5D6K,IAJ6B,mBAS1C,OACI,sBAAKxL,UAAU,gBAAf,UACI,yBAAQA,UAAU,SAAlB,UACI,sBAAMA,UAAU,cAAhB,sCACA,sBAAK2J,MAAO,CAACO,QAAS,OAAQuB,YAAa,QAA3C,UACI,qBAAKzL,UAAU,iBAAiBgC,QAAS,kBAAMc,EAAc,IAA7D,SACI,mBAAG9C,UAAU,YAAYW,cAAY,WAGzC,qBAAKX,UAAU,iBAAiBgC,QAAS,kBAAMc,EAAc,IAA7D,SACI,mBAAG9C,UAAU,wBAAwBW,cAAY,iBAK7C,IAAfkC,GAAoB,cAAC0I,EAAD,CAAiBC,SAAU,cAAC,EAAD,MAChC,IAAf3I,GAAoB,cAAC0I,EAAD,CACjBC,SAAU,cAAC,EAAD,CAAU3K,MAAOA,EAAOC,SAAUA,EAAUC,YAAaA,EAC/CC,eAAgBA,MAExC,qBAAKhB,UAAS,mBAA6B,IAAf6C,GAAoB,oBAAhD,SACMJ,GAAgBE,EAAe,cAACgB,EAAD,IAAc,cAAC2H,EAAD,CAAc1I,eAAgBA,UC3oB7F8I,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFrD,SAASgC,eAAe,U,iBCT1BsB,EAAQpE,cAAgB,CACpB,cACA,eACA,aACA,mBACA,cACA,gBACA,iBAGJoE,EAAQC,uBAAyB,CAC7B,YAAe,SAACC,GACZ,OAAO,IAAIhE,KAAKgE,GAAWC,eAE/B,aAAgB,SAACD,GACb,OAAO,IAAIhE,KAAKgE,GAAWE,YAE/B,WAAc,SAACF,GACX,OAAO,IAAIhE,KAAKgE,GAAWG,WAE/B,iBAAoB,SAACH,GACjB,OAAO,IAAIhE,KAAKgE,GAAWI,UAE/B,YAAe,SAACJ,GACZ,OAAO,IAAIhE,KAAKgE,GAAWK,YAE/B,cAAiB,SAACL,GACd,OAAO,IAAIhE,KAAKgE,GAAWM,cAE/B,cAAiB,SAACN,GACd,OAAO,IAAIhE,KAAKgE,GAAWO,gB","file":"static/js/main.56b819fd.chunk.js","sourcesContent":["import React from \"react\";\nimport {Bar, Line} from \"react-chartjs-2\";\n\nfunction Graph({insight, siblingGroup, extractor, measureLabel, dimensions}) {\n\n    function generateData(data){\n        let result = {labels: [], data: []}\n        for(const [key, value] of Object.entries(data)){\n            result.labels.push(key);\n            result.data.push(value);\n        }\n        return result;\n    }\n    const set = generateData(insight.resultSet);\n\n\n    const data = {\n        labels: set.labels,\n        datasets: [\n            {\n                label: measureLabel,\n                data: set.data,\n                backgroundColor: [\n                    'rgba(255, 99, 132, 0.2)',\n                    'rgba(54, 162, 235, 0.2)',\n                    'rgba(255, 206, 86, 0.2)',\n                    'rgba(75, 192, 192, 0.2)',\n                    'rgba(153, 102, 255, 0.2)',\n                    'rgba(255, 159, 64, 0.2)',\n                ],\n                borderColor: [\n                    'rgba(255, 99, 132, 1)',\n                    'rgba(54, 162, 235, 1)',\n                    'rgba(255, 206, 86, 1)',\n                    'rgba(75, 192, 192, 1)',\n                    'rgba(153, 102, 255, 1)',\n                    'rgba(255, 159, 64, 1)',\n                ],\n                borderWidth: 2,\n            },\n        ],\n    };\n\n    const options = {\n\n    };\n\n    const getChart = () => {\n        if(insight.insightType === 'Shape'){\n            return (\n                <Line className=\"mainColor\" data={data} options={options}/>\n            )\n        } else {\n            return (\n                <Bar data={data} options={options}/>\n            )\n        }\n    }\n\n    return (\n        <div className=\"graphContainer\">\n            <h4>Type: {insight.insightType}</h4>\n            <h4>Sibling Group: SG({'<'}{siblingGroup.map((sg, key) => {\n                return (<span title={sg.title} key={key}>{sg.value + (key === siblingGroup.length -1 ? \"\" : \",\")}</span>)\n            })}{'>'}, {dimensions[insight.dimension]})</h4>\n            <h4>Extractor: {extractor}</h4>\n            <h4>Score: {insight.value}</h4>\n            <div className=\"chartContainer\">\n                {getChart()}\n            </div>\n\n        </div>\n    )\n}\n\nexport default Graph;","import React from \"react\";\n\nfunction Help() {\n    return (\n        <div className=\"openDialogContainer\">\n            <h1>Help</h1>\n            <h2>Extracting Top-K Insights from Multi-Dimensional Data</h2>\n            <h3>About</h3>\n            <p>\n                This project was created for my thesis.\n                The repository can be found <a href=\"https://github.com/Kinigopoulos/top-k-insights\" target=\"_blank\"\n                                               rel=\"noreferrer\">here!</a>\n            </p>\n            <h3>Executing the algorithm</h3>\n            <p>\n                To start off, make sure Apache Druid is running.<br/>\n                Also make sure that you have set up the correct ports and IPs for the server to connect with Druid.\n                <br/>\n                The default values are: <br/>\n                Broker: http://localhost:8082 <br/>\n                Coordinator: http://localhost:8081 <br/>\n                Router: http://localhost:8888 <br/>\n                Click the <i className=\"fa fa-cog\" aria-hidden=\"true\"/> Settings icon to change them if needed.\n            </p>\n            <h3>Parameters</h3>\n            <ul>\n                <li>\n                    <h4>DataSource Name</h4>\n                    Choose the input data which is stored in your Druid server. You need to add data there if you don't\n                    see any option.\n                </li>\n                <li>\n                    <h4>Domain Columns</h4>\n                    Choose the columns that you want to include for the extraction. You don't need to choose the\n                    measurement column here. <br/> Right of each included column you can select whether the column is\n                    ordinal.\n                    Ordinal columns are used to generate shape insights.\n                </li>\n                <li>\n                    <h4>Measure Column</h4>\n                    Choose the measure/value column of your data.\n                </li>\n                <li>\n                    <h4>Top-K Results</h4>\n                    The number of top insights to be extracted. Minimum: 1.\n                </li>\n                <li>\n                    <h4>τ-depth</h4>\n                    The depth of the composite extractors. Minimum: 1 uses only the aggregate function.\n                </li>\n                <li>\n                    <h4>Aggregator Function</h4>\n                    The aggregate function to be used for the measure column calculations.\n                </li>\n                <li>\n                    <h4>Extractors</h4>\n                    The type of extractors to extract data.\n                </li>\n                <li>\n                    <h4>Insight Types</h4>\n                    The types of insights to look up.\n                </li>\n                <li>\n                    <h4>Filters</h4>\n                    Exclude documents by defining a custom query to druid.\n                </li>\n                <ul>\n                    <li>Use <b>equals</b> to include only documents with the given property.</li>\n                    <li>Use <b>not equals</b> to exclude documents with the given property.</li>\n                </ul>\n                Use <button>+</button> to add more conditions.\n            </ul>\n            <p>When you are ready press the <button>Execute</button> button. Your results will get executed and presented.</p>\n        </div>\n    )\n}\n\nexport default Help;","import React, {useState} from \"react\";\nimport \"./WindowComponent.css\";\n\nfunction Settings({ports, setPorts, credentials, setCredentials}) {\n\n    const [settings, setSettings] = useState(ports || {});\n    const [localCredentials, setLocalCredentials] = useState(credentials || {});\n\n    function setPort(e) {\n        e.preventDefault();\n        const newSettings = {...settings, [e.target.name]: e.target.value};\n        setSettings(newSettings);\n    }\n\n    function setCredential(e) {\n        e.preventDefault();\n        const newSettings = {...localCredentials, [e.target.name]: e.target.value};\n        setLocalCredentials(newSettings);\n    }\n\n    function apply(e) {\n        e.preventDefault();\n        setPorts(settings);\n        setCredentials(localCredentials);\n        localStorage.setItem(\"ports\", JSON.stringify(settings));\n        localStorage.setItem(\"credentials\", JSON.stringify(localCredentials));\n        window.location.reload();\n    }\n\n    return (\n        <div className=\"openDialogContainer\">\n            <h1>Settings</h1>\n            <h2>Set Up Your Druid Ports</h2>\n            {\n                Object.entries(settings).map(([setting, value]) => {\n                    return (\n                        <div key={setting}>\n                            <span>{setting.toString()}</span>\n                            <input name={setting} type=\"text\" onChange={setPort} value={value}/>\n\n                        </div>\n                    )\n                })\n            }\n\n            <h2>Set Up Your Credentials</h2>\n            {\n                Object.entries(localCredentials).map(([setting, value]) => {\n                    return (\n                        <div key={setting}>\n                            <span>{setting.toString()}</span>\n                            <input name={setting} type={setting === \"password\" ? \"password\" : \"text\"} onChange={setCredential} value={value}/>\n\n                        </div>\n                    )\n                })\n            }\n            <button onClick={apply}>Apply</button>\n        </div>\n    )\n}\n\nexport default Settings;","import React, {useEffect, useState} from \"react\";\nimport axios from \"axios\";\nimport './App.css';\nimport Graph from \"./Graph\";\nimport Help from \"./Components/Help\";\nimport Settings from \"./Components/Settings\";\nimport {__timeColumns} from \"./constants\";\n\nfunction App() {\n\n    const [druidRunning, setDruidRunning] = useState(true);\n    const [bypassDruid, setBypassDruid] = useState(false);\n    const [openDialog, setOpenDialog] = useState(0);\n    const [ports, setPorts] = useState(JSON.parse(localStorage.getItem(\"ports\")) || {\n        Broker: \"http://localhost:8082\",\n        Router: \"http://localhost:8888\"\n    });\n    const [credentials, setCredentials] = useState(JSON.parse(localStorage.getItem(\"credentials\")) || {\n        username: \"\",\n        password: \"\"\n    });\n    const getHeadersWithCredentials = () => {\n        const headers = {};\n        if (credentials.username && credentials.password) {\n            headers.username = credentials.username;\n            headers.password = credentials.password;\n        }\n        return headers;\n    };\n\n    const aggregators = [\"Sum\", \"Count\", \"Mean\"];\n    const defaultExtractors = [\n        \"PreviousDifferenceExtractor\",\n        \"RankExtractor\",\n        \"PercentageExtractor\",\n        \"AverageDifferenceExtractor\"\n    ];\n    const defaultInsightTypes = [\n        \"Point\",\n        \"Shape\",\n        \"Attribution\",\n        \"TwoPoints\",\n        \"LastPoint\"\n    ];\n    const filterTypes = [\n        \"equals\",\n        \"not equals\"\n    ];\n\n    function MainBody() {\n        const [dataSources, setDataSources] = useState([]);\n        const [columns, setColumns] = useState([]);\n        const [options, setOptions] = useState({\n            datasource: \"\",\n            columns: [],\n            ordinal: [],\n            measureColumn: \"\",\n            k: 1,\n            t: 1,\n            aggregator: aggregators[0],\n            extractors: [...defaultExtractors],\n            insightTypes: [...defaultInsightTypes],\n            filters: []\n        });\n        const [isExecuting, setIsExecuting] = useState(false);\n        const [dimensions, setDimensions] = useState([]);\n        const [insights, setInsights] = useState([]);\n        const [numberOfRows, setNumberOfRows] = useState(-1);\n        const [selectedInsight, setSelectedInsight] = useState(-1);\n        const [loadedInsights, setLoadedInsights] = useState(false);\n\n        function loadInsights(data) {\n            const {columns, options, rows, dimensions, insights} = JSON.parse(data.toString());\n            setLoadedInsights(true);\n            setColumns(columns);\n            setOptions(options);\n            setNumberOfRows(rows);\n            setDimensions(dimensions);\n            setInsights(insights);\n        }\n\n        useEffect(() => {\n            axios.get(\"/data-sources\", {params: {broker: ports.Broker}, headers: getHeadersWithCredentials()})\n                .then(res => {\n                    setDataSources(res.data);\n                }).catch(err => {\n                setDruidRunning(false);\n                console.log(err);\n            });\n        }, []);\n\n        useEffect(() => {\n            if (loadedInsights) return;\n            const name = options.datasource;\n            axios.get(\"/dimensions\", {\n                params: {broker: ports.Broker, datasource: name},\n                headers: getHeadersWithCredentials()\n            })\n                .then(res => {\n                    if (Array.isArray(res.data)) {\n                        const columns = res.data.map(column => {\n                            if (column === \"__time\") {\n                                return __timeColumns;\n                            }\n                            return column;\n                        }).flat();\n                        setColumns(columns);\n                    } else {\n                        setColumns([]);\n                    }\n                    setOptions(options => {\n                        return {...options, columns: [], ordinal: [], measureColumn: ''}\n                    });\n                })\n                .catch(err => {\n                    console.log(err);\n                });\n        }, [options.datasource, dataSources, loadedInsights])\n\n        function setOption(e) {\n            e.preventDefault();\n            if (e.target.name === 'datasource' && loadedInsights) {\n                setLoadedInsights(false);\n            }\n            setOptions({...options, [e.target.name]: e.target.value});\n        }\n\n        function setNumericOption(e) {\n            e.preventDefault();\n            setOptions({...options, [e.target.name]: parseInt(e.target.value)})\n        }\n\n        function toggleColumn(e) {\n            let newColumns = options.columns;\n            let newOrdinal = options.ordinal;\n            if (e.target.checked) {\n                newColumns.push(e.target.value);\n            } else {\n                const index = newColumns.indexOf(e.target.value);\n                if (index > -1) {\n                    newColumns.splice(index, 1);\n                }\n                const ordinalIndex = newOrdinal.indexOf(e.target.value);\n                if (ordinalIndex > -1) {\n                    newOrdinal.splice(ordinalIndex, 1);\n                }\n            }\n            setOptions({...options, columns: newColumns, ordinal: newOrdinal});\n        }\n\n        function toggleOrdinal(e) {\n            let newOrdinal = options[e.target.name];\n            if (e.target.checked) {\n                newOrdinal.push(e.target.value);\n            } else {\n                const ordinalIndex = newOrdinal.indexOf(e.target.value);\n                if (ordinalIndex > -1) {\n                    newOrdinal.splice(ordinalIndex, 1);\n                }\n            }\n            setOptions({...options, [e.target.name]: newOrdinal});\n        }\n\n        function addFilter(e) {\n            e.preventDefault();\n            setOptions({...options, filters: [...options.filters, {type: \"\", dimension: \"\", value: [\"\"]}]})\n        }\n\n        function setFilter(e) {\n            e.preventDefault();\n\n            const name = e.target.name.split('-')[0];\n            const id = Number.parseInt(e.target.name.split('-')[1]);\n\n            const newFilters = [...options.filters];\n            newFilters[id][name] = e.target.value;\n            setOptions({...options, filters: newFilters});\n        }\n\n        function setFilterValue(e) {\n            e.preventDefault();\n\n            const name = Number.parseInt(e.target.name.split('-')[0]);\n            const id = Number.parseInt(e.target.name.split('-')[1]);\n\n            const newFilters = [...options.filters];\n            newFilters[id].value[name] = e.target.value;\n            setOptions({...options, filters: newFilters});\n        }\n\n        function addFilterValue(e) {\n            e.preventDefault();\n            const id = Number.parseInt(e.target.name);\n            const value = Number.parseInt(e.target.value);\n            const newFilters = [...options.filters];\n\n            if (value === 0) {\n                newFilters[id].value.push(\"\");\n            } else if (value > 0) {\n                newFilters[id].value.splice(value, 1);\n            }\n\n\n            setOptions({...options, filters: newFilters});\n        }\n\n        function removeFilter(e) {\n            e.preventDefault();\n            const id = e.target.id;\n            const newFilters = [...options.filters];\n            newFilters.splice(id, 1);\n            setOptions({...options, filters: newFilters});\n        }\n\n        const ExecuteQuery = () => {\n            if (options.datasource === \"\") {\n                window.alert(\"Please choose a valid datasource\");\n                return;\n            } else if (options.columns.length === 0) {\n                window.alert(\"Domain columns' size cannot be 0\");\n                return;\n            } else if (options.measureColumn === \"\") {\n                window.alert(\"Please choose a valid measure column\");\n                return;\n            } else if (options.k <= 0) {\n                window.alert(\"K must be a positive number\");\n                return;\n            } else if (options.t <= 0) {\n                window.alert(\"τ must be a positive number\");\n                return;\n            } else if (options.extractors.length === 0) {\n                window.alert(\"Extractors' size cannot be 0\");\n                return;\n            } else if (options.insightTypes.length === 0) {\n                window.alert(\"Insight types' size cannot be 0\");\n                return;\n            }\n            setIsExecuting(true);\n            axios.post(\"/run\", {\n                options: options,\n                ports: {broker: ports.Broker, router: ports.Router}\n            }, {headers: getHeadersWithCredentials()})\n                .then(res => {\n                    console.log(res.data);\n                    setIsExecuting(false);\n                    setDimensions(res.data.dimensions);\n                    setInsights(res.data.result);\n                    setNumberOfRows(res.data.rows);\n                })\n                .catch(err => {\n                    console.log(err.response.data.message);\n                    window.alert(err.response.data.message);\n                    setIsExecuting(false);\n                    setInsights([]);\n                });\n        }\n\n        const extractorToString = data => {\n            const extractorSign = ex => {\n                switch (ex) {\n                    case 'PreviousDifferenceExtractor':\n                        return '∆prev'\n                    case 'RankExtractor':\n                        return 'Rank'\n                    case 'PercentageExtractor':\n                        return '%'\n                    case 'AverageDifferenceExtractor':\n                        return '∆avg'\n                    default:\n                        return ex;\n                }\n            }\n            let string = \"<\";\n            data.forEach((e, key) => {\n                let comma = \", \";\n                if (key === data.length - 1) {\n                    comma = \"\";\n                }\n\n                string += `(${extractorSign(e.type)}, ${dimensions[e.dimension]})${comma}`\n\n            })\n            string += \">\";\n            return string;\n        }\n\n        function changeSelectedInsight(key) {\n            if (selectedInsight === key) {\n                setSelectedInsight(-1);\n            } else {\n                setSelectedInsight(key);\n            }\n        }\n\n        const downloadFile = async () => {\n            const myData = {\n                columns: columns,\n                options: options,\n                rows: numberOfRows,\n                dimensions: dimensions,\n                insights: insights\n            };\n            const fileName = `${options.datasource}_insights_${Date.now()}`;\n\n            const json = JSON.stringify(myData);\n            const blob = new Blob([json], {type: 'application/json'});\n            const href = URL.createObjectURL(blob);\n            const link = document.createElement('a');\n            link.href = href;\n            link.download = fileName + \".json\";\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n        };\n\n        const showFile = async (e) => {\n            e.preventDefault()\n            const reader = new FileReader();\n            reader.onload = async (e) => {\n                loadInsights(e.target.result);\n            };\n            reader.readAsText(e.target.files[0]);\n        };\n\n        return (\n            <div className=\"mainBody\">\n                <div className=\"inputDataContainer\">\n                    <span>DataSource Name</span>\n                    <select name=\"datasource\" id=\"datasource\" onChange={setOption} value={options.datasource}>\n                        <option value=\"\">--- Select Source ---</option>\n                        {dataSources.map((dataSource, key) => {\n                            return (\n                                <option value={dataSource} key={key}>\n                                    {dataSource}\n                                </option>\n                            )\n                        })}\n                    </select>\n\n                    <div className=\"domainColumn\">\n                        <span>Domain Columns</span>\n                        <span>Ordinal</span>\n                    </div>\n\n                    {columns.length === 0 &&\n                    <>\n                        <br/>\n                        <span>Select a datasource first</span>\n                    </>\n                    }\n                    <form>\n                        {\n                            columns.map((column, key) => {\n                                return (\n                                    <div className={`domainColumn ${key % 2 && 'brighten'}`} key={key}>\n                                        <div>\n                                            <input type=\"checkbox\" onChange={toggleColumn}\n                                                   id={`columns${column}`}\n                                                   checked={options.columns.includes(column)}\n                                                   name=\"columns\" value={column}/>\n                                            &nbsp;\n                                            <label htmlFor={`columns${column}`}>{column}</label>\n                                        </div>\n                                        {options.columns.includes(column) &&\n                                        <div>\n                                            <input type=\"checkbox\" onChange={toggleOrdinal}\n                                                   name=\"ordinal\"\n                                                   value={column}\n                                            />\n                                        </div>\n                                        }\n\n                                    </div>\n                                )\n                            })\n                        }\n                    </form>\n                    <br/>\n\n                    <span className=\"mt-1\">Measure Column</span>\n                    <select name=\"measureColumn\" id=\"measureColumn\" onChange={setOption} value={options.measureColumn}>\n                        <option value={''}>--- Select Measurement ---</option>\n                        {columns.map((column, key) => {\n                            return (\n                                <option value={column} key={key}>\n                                    {column}\n                                </option>\n                            )\n                        })}\n                    </select>\n\n\n                    <span>Top-K Results</span>\n                    <input className=\"\" name=\"k\" type=\"number\" onChange={setNumericOption} value={options.k}/>\n\n                    <span>τ-depth</span>\n                    <input className=\"\" name=\"t\" type=\"number\" onChange={setNumericOption} value={options.t}/>\n\n                    <span className=\"mt-1\">Aggregator Function</span>\n                    <select name=\"aggregator\" id=\"aggregator\" onChange={setOption} value={options.aggregator}>\n                        {aggregators.map((column, key) => {\n                            return (\n                                <option value={column} key={key}>\n                                    {column}\n                                </option>\n                            )\n                        })}\n                    </select>\n\n                    <span>Extractors</span>\n                    <form>\n                        {\n                            defaultExtractors.map((column, key) => {\n                                return (\n                                    <div className={`${key % 2 && 'brighten'}`} key={key}>\n                                        <div>\n                                            <input type=\"checkbox\" onChange={toggleOrdinal}\n                                                   id={`extractor${column}`}\n                                                   checked={options.extractors.includes(column)}\n                                                   name=\"extractors\"\n                                                   value={column}/>\n                                            &nbsp;\n                                            <label htmlFor={`extractor${column}`}>{column}</label>\n                                        </div>\n                                    </div>\n                                )\n                            })\n                        }\n                    </form>\n                    <br/>\n\n                    <span>Insight Types</span>\n                    <form>\n                        {\n                            defaultInsightTypes.map((column, key) => {\n                                return (\n                                    <div className={`${key % 2 && 'brighten'}`} key={key}>\n                                        <div>\n                                            <input type=\"checkbox\" onChange={toggleOrdinal}\n                                                   id={`insightType${column}`}\n                                                   checked={options.insightTypes.includes(column)}\n                                                   name=\"insightTypes\"\n                                                   value={column}/>\n                                            &nbsp;\n                                            <label htmlFor={`insightType${column}`}>{column}</label>\n                                        </div>\n                                    </div>\n                                )\n                            })\n                        }\n                    </form>\n                    <br/>\n\n                    <span>Filters</span>\n                    <form>\n                        {\n                            options.filters.map((filter, key) => {\n                                return (\n                                    <React.Fragment key={key}>\n                                        <span>Filter No. {key + 1} <span className=\"filterRemove\" onClick={removeFilter}\n                                                                         id={key}>Remove</span></span>\n                                        <div className=\"filterContainer\">\n                                            <select onChange={setFilter} name={`dimension-${key}`}\n                                                    value={filter.dimension}>\n                                                <option value={''}>--- Select Dimension ---</option>\n                                                {columns.map((column, key) => {\n                                                    return (\n                                                        <option value={column} key={key}>\n                                                            {column}\n                                                        </option>\n                                                    )\n                                                })}\n                                            </select>\n\n                                            <select onChange={setFilter} className=\"filterType\" name={`type-${key}`}\n                                                    value={filter.type}>\n                                                <option value={''}>--- Select Type ---</option>\n                                                {filterTypes.map((type, key) => {\n                                                    return (\n                                                        <option value={type} key={key}>\n                                                            {type}\n                                                        </option>\n                                                    )\n                                                })}\n                                            </select>\n                                        </div>\n                                        {\n                                            filter.value.map((val, key2) => {\n                                                return (\n                                                    <div className=\"filterValueContainer\" key={key2}>\n                                                        <input className=\"filterValue\" name={`${key2}-${key}`}\n                                                               onChange={setFilterValue}\n                                                               value={val}/>\n                                                        {\n                                                            filter.type === \"equals\" && (key2 === 0 ?\n                                                                <button className=\"addOrFilterButton\" value={key2}\n                                                                        title=\"Add OR condition\" name={key}\n                                                                        onClick={addFilterValue}>\n                                                                    <span style={{pointerEvents: \"none\"}}>+</span>\n                                                                </button>\n                                                                :\n                                                                <button\n                                                                    className=\"addOrFilterButton removeOrFilterButton\"\n                                                                    value={key2} title=\"Remove OR condition\" name={key}\n                                                                    onClick={addFilterValue}>\n                                                                    <span style={{pointerEvents: \"none\"}}>-</span>\n                                                                </button>)\n                                                        }\n                                                    </div>\n                                                )\n                                            })\n                                        }\n                                    </React.Fragment>\n                                )\n                            })\n                        }\n                        <button onClick={addFilter} title=\"Add a filter\">+</button>\n                    </form>\n                    <br/>\n\n                    <button onClick={ExecuteQuery}>Execute</button>\n                </div>\n\n                <div className=\"resultsContainer\">\n                    {isExecuting && <h1>Loading</h1>}\n                    <div style={{\n                        display: \"flex\", justifyContent: \"space-between\",\n                        alignItems: \"center\", marginBottom: \"0.4rem\"\n                    }}>\n                        {\n                            numberOfRows > 0 ?\n                                <>\n                                    <h3 style={{margin: 0}}>Number of documents/rows: {numberOfRows}</h3>\n                                    <button style={{margin: 0}} onClick={downloadFile}>\n                                        <i className=\"fa fa-download\"/> Save insights\n                                    </button>\n                                </>\n                                :\n                                <>\n                                    <div/>\n                                    <button style={{margin: 0}}\n                                            onClick={() => document.getElementById('fileOpen').click()}>\n                                        <i className=\"fa fa-upload\"/> Load insights\n                                    </button>\n\n                                    <input type=\"file\" id=\"fileOpen\" onChange={showFile} style={{display: \"none\"}}/>\n                                </>\n                        }\n                    </div>\n                    {insights.length > 0 &&\n                    <div>\n                        <div className=\"insightRow\" style={{marginBottom: \"0.2rem\"}}>\n                            <span className=\"insightCell\" style={{flexShrink: 1.37}}>No.</span>\n                            <span className=\"insightCell\" style={{flexShrink: 1.29}}>Insight Type</span>\n                            <span className=\"insightCell\">Sibling Group</span>\n                            <span className=\"insightCell\">Extractor</span>\n                            <span className=\"insightCell\">Score</span>\n                        </div>\n                        {\n                            insights.map((insight, key) => {\n                                const siblingGroup = [];\n                                insight.subspace.forEach((dim, key) => {\n                                    siblingGroup.push({title: dimensions[key], value: dim === null ? \"*\" : dim});\n                                });\n                                let extractorString = extractorToString(insight.extractor);\n\n                                return (\n                                    <React.Fragment key={key}>\n                                        <div className=\"insightRow insightRowObj\"\n                                             onClick={() => changeSelectedInsight(key)}>\n\n                                            <span className=\"insightCell\" style={{flexShrink: 1.37}}>\n                                                {key + 1}.\n                                            </span>\n\n                                            <span className=\"insightCell\" style={{flexShrink: 1.29}}>\n                                                {insight.insightType}\n                                            </span>\n\n                                            <span className=\"insightCell\">\n                                                SG({'<'}{siblingGroup.map((sg, key) => {\n                                                return (<span title={sg.title} key={key}>{sg.value + (key === siblingGroup.length -1 ? \"\" : \",\")}</span>)\n                                            })}{'>'}, {dimensions[insight.dimension]})\n                                            </span>\n\n                                            <span className=\"insightCell\">\n                                                {extractorString}\n                                            </span>\n\n                                            <span className=\"insightCell\">\n                                                {(Math.round(insight.value * 100) / 100).toFixed(3)}\n                                            </span>\n\n                                        </div>\n                                        {\n                                            selectedInsight === key &&\n                                            <Graph insight={insight}\n                                                   siblingGroup={siblingGroup}\n                                                   extractor={extractorString}\n                                                   measureLabel={options.measureColumn}\n                                                   dimensions={dimensions}/>\n                                        }\n                                    </React.Fragment>\n                                )\n                            })\n                        }\n                    </div>\n                    }\n                </div>\n            </div>\n        );\n    }\n\n    function ErrorMessage({setBypassDruid}) {\n        return (\n            <div className=\"errorMessage\">\n                <span className=\"errorMessageText\">\n                    Make sure that your Druid server is running and refresh the page!\n                </span>\n                <button className=\"errorMessageButton\" onClick={() => setBypassDruid(true)}>Run saved insights</button>\n            </div>\n        );\n    }\n\n    function WindowComponent({children}) {\n        return (\n            <div className=\"windowDialog\" key=\"WindowComponent\">\n                <div className=\"windowDialogCloseContainer\" onClick={() => setOpenDialog(0)}>\n                    <i className=\"fa fa-times windowDialogClose\" aria-hidden=\"true\"/>\n                </div>\n                {children}\n            </div>\n        )\n    }\n\n    return (\n        <div className=\"mainContainer\">\n            <header className=\"header\">\n                <span className=\"headerTitle\">Top-K Insights Extractor</span>\n                <div style={{display: \"flex\", marginRight: \"2rem\"}}>\n                    <div className=\"headerHelpIcon\" onClick={() => setOpenDialog(2)}>\n                        <i className=\"fa fa-cog\" aria-hidden=\"true\"/>\n                    </div>\n\n                    <div className=\"headerHelpIcon\" onClick={() => setOpenDialog(1)}>\n                        <i className=\"fa fa-question-circle\" aria-hidden=\"true\"/>\n                    </div>\n                </div>\n            </header>\n\n            {openDialog === 1 && <WindowComponent children={<Help/>}/>}\n            {openDialog === 2 && <WindowComponent\n                children={<Settings ports={ports} setPorts={setPorts} credentials={credentials}\n                                    setCredentials={setCredentials}/>}/>}\n\n            <div className={`mainBody ${openDialog !== 0 && \"disabledMainBody\"}`}>\n                {(druidRunning || bypassDruid) ? <MainBody/> : <ErrorMessage setBypassDruid={setBypassDruid}/>}\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);","exports.__timeColumns = [\n    \"__time_Year\",\n    \"__time_Month\",\n    \"__time_Day\",\n    \"__time_DayOfWeek\",\n    \"__time_Hour\",\n    \"__time_Minute\",\n    \"__time_Second\"\n];\n\nexports.__timeColumnsFunctions = {\n    \"__time_Year\": (timestamp) => {\n        return new Date(timestamp).getFullYear();\n    },\n    \"__time_Month\": (timestamp) => {\n        return new Date(timestamp).getMonth();\n    },\n    \"__time_Day\": (timestamp) => {\n        return new Date(timestamp).getDate();\n    },\n    \"__time_DayOfWeek\": (timestamp) => {\n        return new Date(timestamp).getDay();\n    },\n    \"__time_Hour\": (timestamp) => {\n        return new Date(timestamp).getHours();\n    },\n    \"__time_Minute\": (timestamp) => {\n        return new Date(timestamp).getMinutes();\n    },\n    \"__time_Second\": (timestamp) => {\n        return new Date(timestamp).getSeconds();\n    }\n}"],"sourceRoot":""}