{"version":3,"sources":["Data/topK/algorithm.js","Data/topK/database.js","Data/topK/utils.js","Graph.js","Components/Help.js","Components/Settings.js","Data/pseudoServer.js","App.js","index.js","constants.js"],"names":["Database","require","DataType","Config","AverageDifferenceExtractor","PercentageExtractor","PreviousDifferenceExtractor","RankExtractor","PointInsight","LastPointInsight","Attribution","TwoPointsInsight","ShapeInsight","SumAggregator","MeanAggregator","CountAggregator","CompositeExtractor","Insight","subspace","dimension","Ce","value","insightType","resultSet","this","compositeExtractor","TopKInsights","getSubspaceString","subspaceObj","map","dim","getValue","extractorObj","pairs","pair","type","getType","toString","getDimension","resultSetObj","keys","forEach","key","get","extractor","Queue","k","list","splice","insight","i","length","database","t","priorityQueue","dataCube","Map","impactCube","domainDimensions","getDomainDimensions","dimensionNames","getDimensions","compositeExtractors","findCombinations","getSubspaceCopy","superSubspace","domainDimension","EnumerateInsight","values","getValues","newSubspace","dividingDimension","reverse","Dx","getPair","subspaceString","has","impact","getSubspaceSum","set","sub","console","log","getDimensionName","isValid","getImpact","peek","F","ExtractF","isOrdinal","size","insightTypes","significance","getSignificance","S","poll","add","M","RecursiveExtract","level","FLevel","extractorDimension","childSubspace","undefined","getOutput","getAggregator","dataType","module","exports","TopKAlgorithm","data","columns","ordinalColumns","measureColumnName","aggregator","extractors","datasource","Array","dimensionTypes","column","DATA_TYPE","COLUMN_NAME","extractTypes","measureDimension","index","columnName","ordinalSet","Set","ordinalDimensions","object","row","dimensionName","push","addRow","setAggregatorByString","setExtractorByString","setInsightTypesByString","insights","getInsights","toJSON","dimensions","measureIndex","ordinal","name","domainValues","getSubspace","Error","sum","belongsToSubspace","getMeasureValue","initial","regression","Logistic","Normal","mean","Aggregator","count","Extractor","input","avg","sort","a","b","findIndex","previousValue","rank","InsightType","calculateStandardDeviation","numbers","deviation","number","Math","pow","sqrt","sortedValues","min","s","max","regressionResult","power","intercept","equation","slope","isNaN","residuals","predictedValue","xMaxErr","meanResult","standardDeviation","Number","MIN_VALUE","cdf","distribution","linear","r2","abs","e","percentage","minVal","insightsTypes","extractorsSet","selected","availableExtractors","setExtractors","insightTypesSet","availableInsightTypes","setInsightTypes","availableAggregators","aggregatorFunction","setAggregator","ExtractorPair","newExtractors","isMeaningful","satisfiesRequirements","makeCompositeExtractor","getMeasureIndex","baseExtractor","Graph","siblingGroup","measureLabel","result","labels","Object","entries","generateData","datasets","label","backgroundColor","borderColor","borderWidth","options","className","sg","title","Help","href","target","rel","aria-hidden","Settings","ports","setPorts","credentials","setCredentials","useState","settings","setSettings","localCredentials","setLocalCredentials","setPort","preventDefault","newSettings","setCredential","setting","onChange","onClick","localStorage","setItem","JSON","stringify","window","location","reload","__timeColumns","__timeColumnsFunctions","Promise","resolve","reject","dataJSON","body","time","measureColumn","queryColumns","filters","indexOf","ordinalIndex","newRow","includes","__time","totalRows","columnTypesResponse","schema","filter","entry","initialize","rows","err","App","druidRunning","bypassDruid","setBypassDruid","openDialog","setOpenDialog","parse","getItem","Broker","Router","username","password","aggregators","defaultExtractors","defaultInsightTypes","MainBody","dataSources","setDataSources","setColumns","slice","setOptions","isExecuting","setIsExecuting","setDimensions","setInsights","numberOfRows","setNumberOfRows","selectedInsight","setSelectedInsight","loadedInsights","setLoadedInsights","loadInsights","setOption","setNumericOption","parseInt","toggleColumn","newColumns","newOrdinal","checked","toggleOrdinal","useEffect","previousOptions","then","res","isArray","flat","catch","downloadFile","myData","fileName","Date","now","json","blob","Blob","URL","createObjectURL","link","document","createElement","download","appendChild","click","removeChild","showFile","reader","FileReader","onload","readAsText","files","id","dataSource","htmlFor","alert","runProgram","response","message","style","display","justifyContent","alignItems","marginBottom","margin","getElementById","flexShrink","extractorString","string","comma","ex","extractorSign","extractorToString","Fragment","changeSelectedInsight","round","toFixed","ErrorMessage","WindowComponent","children","marginRight","ReactDOM","render","StrictMode","timestamp","getFullYear","getMonth","getDate","getDay","getHours","getMinutes","getSeconds"],"mappings":"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","file":"static/js/main.8e87c219.chunk.js","sourcesContent":["const {Database} = require(\"./database\");\nconst {\n    DataType, AverageDifferenceExtractor, PercentageExtractor, PreviousDifferenceExtractor, RankExtractor,\n    PointInsight, LastPointInsight, Attribution, TwoPointsInsight, ShapeInsight, SumAggregator, MeanAggregator,\n    CountAggregator, Config, CompositeExtractor\n} = require(\"./utils\");\n\nfunction extractTypes(columns) {\n    const dimensionTypes = new Map();\n    for (const column of columns) {\n        let value = undefined;\n        switch (column.DATA_TYPE) {\n            case \"CHAR\":\n            case \"VARCHAR\":\n                value = \"\";\n                break;\n            case \"DECIMAL\":\n            case \"REAL\":\n            case \"FLOAT\":\n            case \"DOUBLE\":\n                value = 0.0;\n                break;\n            case \"BOOLEAN\":\n                value = false;\n                break;\n            default:\n                value = 0;\n                break;\n        }\n        dimensionTypes.set(column.COLUMN_NAME, value);\n    }\n    return dimensionTypes;\n}\n\nclass Insight {\n    constructor(subspace, dimension, Ce, value, insightType, resultSet) {\n        this.subspace = subspace;\n        this.dimension = dimension;\n        this.compositeExtractor = Ce;\n        this.value = value;\n        this.insightType = insightType;\n        this.resultSet = resultSet;\n    }\n\n    getValue() {\n        return this.value;\n    }\n\n    toString() {\n        return \"Insight{\" +\n            \"subspace=\" + TopKInsights.getSubspaceString(this.subspace) +\n            \", dimension=\" + this.dimension +\n            \", compositeExtractor=\" + this.compositeExtractor +\n            \", value=\" + this.value +\n            '}';\n    }\n\n    toJSON() {\n        const subspaceObj = this.subspace.map(dim => {\n            if (dim) {\n                return dim.getValue();\n            }\n            return dim;\n        });\n        const extractorObj = this.compositeExtractor.pairs.map(pair => {\n            return {type: pair.getType().toString(), dimension: pair.getDimension()};\n        });\n        const resultSetObj = {};\n        [...this.resultSet.keys()].forEach(key => {\n            resultSetObj[key.getValue()] = this.resultSet.get(key);\n        });\n        return {\n            subspace: subspaceObj,\n            dimension: this.dimension,\n            extractor: extractorObj,\n            value: this.value,\n            insightType: this.insightType.getType(),\n            resultSet: resultSetObj\n        }\n    }\n}\n\nclass Queue {\n    constructor(k) {\n        this.k = k;\n        this.list = [];\n    }\n    peek() {\n        return this.list[0];\n    }\n    poll() {\n        this.list.splice(0, 1);\n    }\n    add(insight) {\n        for (let i = 0; i < this.list.length; i++) {\n            if (this.list[i].getValue() >= insight.getValue()) {\n                this.list.splice(i, 0, insight);\n                return;\n            }\n        }\n        this.list.splice(this.list.length, 0, insight);\n    }\n}\n\nclass TopKInsights {\n    constructor(database, k, t) {\n        this.database = database;\n        this.k = k;\n        this.t = t;\n    }\n\n    getInsights() {\n        this.priorityQueue = new Queue(this.k);\n        this.dataCube = new Map();\n        this.impactCube = new Map();\n\n        const domainDimensions = this.database.getDomainDimensions();\n        this.dimensionNames = this.database.getDimensions();\n\n        const compositeExtractors = CompositeExtractor.findCombinations(this.database, this.t);\n        const subspace = Database.getSubspaceCopy(this.database.superSubspace);\n\n        for (const compositeExtractor of compositeExtractors) {\n            for (const domainDimension of domainDimensions) {\n                this.EnumerateInsight(subspace, domainDimension, compositeExtractor);\n                const values = this.database.getValues(domainDimension);\n                for (const value of values) {\n                    const newSubspace = Database.getSubspaceCopy(subspace);\n                    newSubspace[domainDimension] = value;\n                    for (const dividingDimension of domainDimensions) {\n                        if (newSubspace[dividingDimension] !== null) {\n                            continue;\n                        }\n                        this.EnumerateInsight(newSubspace, dividingDimension, compositeExtractor);\n                    }\n                }\n            }\n        }\n\n        return this.priorityQueue.list.reverse();\n    }\n\n    isValid(subspace, dividingDimension, extractor) {\n        for (let i = 1; i < this.t; i++) {\n            const Dx = extractor.getPair(i).getDimension();\n            if (dividingDimension !== Dx && subspace[Dx] === null) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    static getSubspaceString(subspace) {\n        let sub = \"< \";\n        for (const dataType of subspace) {\n            if (dataType === null) {\n                sub += \"* \";\n            } else {\n                sub += `${dataType.getValue()} `;\n            }\n        }\n        sub += \">\";\n        return sub;\n    }\n\n    getImpact(subspace, subspaceString) {\n        if (this.impactCube.has(subspaceString)) {\n            return this.impactCube.get(subspaceString);\n        }\n        const impact = this.database.getSubspaceSum(subspace);\n        this.impactCube.set(subspaceString, impact);\n        return impact;\n    }\n\n    EnumerateInsight(subspace, dimension, extractor) {\n        const sub = TopKInsights.getSubspaceString(subspace);\n        console.log(\"SG(\" + sub + \", \" + this.database.getDimensionName(dimension) + \") \\t\\t\" + extractor.toString(this.database) + \", is valid: \" + this.isValid(subspace, dimension, extractor));\n\n        if (this.isValid(subspace, dimension, extractor)) {\n            const impact = this.getImpact(subspace, sub) / this.getImpact(Database.getSubspaceCopy(this.database.superSubspace));\n            if (this.priorityQueue.list.length === this.k) {\n                if (this.priorityQueue.peek() && impact < this.priorityQueue.peek().getValue()) {\n                    return;\n                }\n            }\n            const F = this.ExtractF(subspace, dimension, extractor);\n            const isOrdinal = this.database.isOrdinal(dimension);\n            if (F.size === 0) {\n                return;\n            }\n\n            for (const insightType of Config.insightTypes) {\n                if (!isOrdinal && insightType.getType() === \"Shape\") {\n                    continue;\n                }\n                const significance = insightType.getSignificance(F);\n                if (significance < 0) {\n                    continue;\n                }\n                const S = significance * impact;\n                if (this.priorityQueue.list.length === this.k) {\n                    if (this.priorityQueue.peek() && S > this.priorityQueue.peek().getValue()) {\n                        this.priorityQueue.poll();\n                        this.priorityQueue.add(new Insight(subspace, dimension, extractor, S, insightType, F));\n                    }\n                } else {\n                    this.priorityQueue.add(new Insight(subspace, dimension, extractor, S, insightType, F));\n                }\n            }\n        }\n    }\n\n    ExtractF(subspace, dimension, extractor) {\n        const F = new Map();\n\n        const newSubspace = Database.getSubspaceCopy(subspace);\n        for (const value of this.database.getValues(dimension)) {\n            newSubspace[dimension] = value;\n            const M = this.RecursiveExtract(newSubspace, dimension, this.t, extractor);\n            if (M !== null) {\n                F.set(value, M);\n            }\n        }\n        return F;\n    }\n\n    RecursiveExtract(subspace, dimension, level, extractor) {\n        if (level > 1) {\n            const FLevel = new Map();\n            const extractorDimension = extractor.getPair(level - 1).getDimension();\n\n            const childSubspace = Database.getSubspaceCopy(subspace);\n            for (const value of this.database.getValues(extractorDimension)) {\n                childSubspace[extractorDimension] = value;\n                const M = this.RecursiveExtract(childSubspace, dimension, level - 1, extractor);\n                if (M !== null) {\n                    FLevel.set(value, M);\n                }\n            }\n\n            if (FLevel.get(subspace[extractorDimension]) === null || FLevel.get(subspace[extractorDimension]) === undefined) {\n                return null;\n            }\n\n            const e = extractor.getPair(level - 1).getType();\n            return e.getOutput(FLevel, subspace[extractorDimension]);\n        }\n        const subspaceString = TopKInsights.getSubspaceString(subspace);\n        if (this.dataCube.has(subspaceString)) {\n            return this.dataCube.get(subspaceString);\n        }\n\n        const M = CompositeExtractor.getAggregator(extractor).getOutput(this.database, subspace, dimension);\n\n        this.dataCube.set(subspaceString, M);\n        return M;\n    }\n}\n\nmodule.exports.TopKAlgorithm = class {\n\n    initialize(data, columns, ordinalColumns, measureColumnName, k, t, aggregator, extractors, insightTypes, datasource) {\n        const domainDimensions = new Array(columns.length - 1);\n        const dimensionNames = new Array(columns.length);\n        const dimensionTypes = extractTypes(columns);\n\n        const measureDimension = dimensionNames.length - 1;\n        for (let i = 0; i < domainDimensions.length; i++) {\n            domainDimensions[i] = i;\n        }\n        let index = 0;\n        for (const column of columns) {\n            const columnName = column.COLUMN_NAME;\n            if (columnName === \"__time\") {\n                continue;\n            } else if (columnName === measureColumnName) {\n                dimensionNames[measureDimension] = columnName;\n                continue;\n            } else {\n                dimensionNames[index] = columnName;\n            }\n            index++;\n        }\n\n        const ordinalSet = new Set(ordinalColumns);\n        const ordinalDimensions = new Array(dimensionNames.length - 1);\n        for (let i = 0; i < ordinalDimensions.length; i++) {\n            if (ordinalSet.has(dimensionNames[i])) {\n                ordinalDimensions[i] = true;\n            }\n        }\n\n        const database = new Database(dimensionNames, domainDimensions, measureDimension, ordinalDimensions, datasource);\n\n        for (const object of data) {\n            const row = [];\n            for (const dimensionName of dimensionNames) {\n                const value = dimensionTypes.get(dimensionName);\n                row.push(new DataType(object[dimensionName] || value));\n            }\n            database.addRow(row);\n        }\n\n        Config.setAggregatorByString(aggregator);\n        Config.setExtractorByString(extractors);\n        Config.setInsightTypesByString(insightTypes);\n\n        const topKInsights = new TopKInsights(database, k, t);\n        const insights = topKInsights.getInsights().map(insight => insight.toJSON());\n\n        console.log(insights);\n        return insights;\n    }\n}\n","module.exports.Database = class {\n\n    constructor(dimensions, domainDimensions, measureIndex, ordinal, name) {\n        this.data = [];\n        this.dimensions = dimensions;\n        this.domainDimensions = domainDimensions;\n        this.measureIndex = measureIndex;\n        this.ordinal = ordinal;\n        this.name = name;\n\n        this.domainValues = [];\n        for (let i = 0; i < dimensions.length; i++) {\n            this.domainValues.push(new Map());\n        }\n        this.superSubspace = this.getSubspace();\n    }\n\n    addRow(row) {\n        if (row.length === this.dimensions.length) {\n            for (let i = 0; i < row.length; i++) {\n                if (this.measureIndex === i) {\n                    continue;\n                }\n                if (this.domainValues[i].has(row[i].getValue())) {\n                    row[i] = this.domainValues[i].get(row[i].getValue());\n                } else {\n                    this.domainValues[i].set(row[i].getValue(), row[i]);\n                }\n            }\n            this.data.push(row);\n        } else {\n            console.log(\"Wrong size of columns\");\n            throw new Error(\"Wrong size\");\n        }\n    }\n\n    getSubspace() {\n        const subspace = [];\n        for(let i = 0; i < this.domainDimensions.length; i++) {\n            subspace.push(null);\n        }\n        return subspace;\n    }\n\n    getName() {\n        return this.name;\n    }\n\n    getDomainValues() {\n        return this.domainValues;\n    }\n\n    static getSubspaceCopy(initial) {\n        return [...initial];\n    }\n\n    getDomainDimensions() {\n        return this.domainDimensions;\n    }\n\n    getDimensions() {\n        return this.dimensions;\n    }\n\n    getMeasureValue(index) {\n        return this.data[index][this.measureIndex].getValue();\n    }\n\n    belongsToSubspace(subspace, index) {\n        for (const domainDimension of this.domainDimensions) {\n            if (subspace[domainDimension] !== null && subspace[domainDimension] !== this.data[index][domainDimension]) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    getSubspaceSum(subspace) {\n        let sum = 0;\n        for (let i = 0; i < this.data.length; i++) {\n            if (this.belongsToSubspace(subspace, i)) {\n                sum += this.getMeasureValue(i);\n            }\n        }\n        return sum;\n    }\n\n    getDimensionName(dimension) {\n        return this.dimensions[dimension];\n    }\n\n    getValues(dimension) {\n        return [...this.domainValues[dimension].values()];\n    }\n\n    isOrdinal(dimension){\n        return this.ordinal[dimension];\n    }\n\n    getMeasureIndex() {\n        return this.measureIndex;\n    }\n\n    size() {\n        return this.data.length;\n    }\n}\n","const regression = require(\"regression\");\nconst Logistic = require('@stdlib/stats-base-dists-logistic').Logistic;\nconst Normal = require('@stdlib/stats-base-dists-normal').Normal;\nconst mean = require('@stdlib/stats-base-mean');\n\nclass DataType {\n    constructor(value) {\n        this.value = value;\n    }\n\n    getValue() {\n        return this.value;\n    }\n}\n\nclass Aggregator {\n    constructor() {\n    }\n\n    getOutput(database, subspace, dimension) {\n        return .0;\n    }\n\n    toString() {\n        return \"Aggregator\";\n    }\n}\n\nclass SumAggregator extends Aggregator {\n    getOutput(database, subspace, dimension) {\n        let sum = 0;\n        for (let i = 0; i < database.size(); i++) {\n            if (database.belongsToSubspace(subspace, i)) {\n                sum += database.getMeasureValue(i);\n            }\n        }\n        return sum;\n    }\n\n    toString() {\n        return \"Sum\";\n    }\n}\n\nclass CountAggregator extends Aggregator {\n    getOutput(database, subspace, dimension) {\n        let count = 0;\n        for (let i = 0; i < database.size(); i++) {\n            if (database.belongsToSubspace(subspace, i)) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    toString() {\n        return \"Count\";\n    }\n}\n\nclass MeanAggregator extends Aggregator {\n    getOutput(database, subspace, dimension) {\n        let sum = 0;\n        let count = 0;\n        for (let i = 0; i < database.size(); i++) {\n            if (database.belongsToSubspace(subspace, i)) {\n                sum += database.getMeasureValue(i);\n                count++;\n            }\n        }\n        if (count === 0) {\n            return .0;\n        }\n        return sum / count;\n    }\n\n    toString() {\n        return \"Mean\";\n    }\n}\n\nclass Extractor {\n    constructor() {\n    }\n\n    satisfiesRequirements(database, dimension) {\n        return true;\n    }\n\n    isMeaningful(extractor) {\n        return true;\n    }\n\n    getOutput(input, value) {\n        return null;\n    }\n\n    toString() {\n        return \"Extractor\";\n    }\n}\n\nclass PercentageExtractor extends Extractor {\n    isMeaningful(extractor) {\n        return false;\n    }\n\n    getOutput(input, value) {\n        let sum = 0;\n        for (const measure of input.values()) {\n            sum += measure;\n        }\n        if (sum === 0) {\n            return .0;\n        }\n\n        return input.get(value) / sum;\n    }\n\n    toString() {\n        return \"PercentageExtractor\";\n    }\n}\n\nclass AverageDifferenceExtractor extends Extractor {\n    getOutput(input, value) {\n        let avg = 0;\n        for (const measure of input.values()) {\n            avg += measure;\n        }\n\n        avg /= input.size;\n        return input.get(value) - avg;\n    }\n\n    toString() {\n        return \"AverageDifferenceExtractor\";\n    }\n}\n\nclass PreviousDifferenceExtractor extends Extractor {\n    satisfiesRequirements(database, dimension) {\n        return database.isOrdinal(dimension);\n    }\n\n    getOutput(input, value) {\n        const keys = [...input.keys()];\n        keys.sort((a, b) => a.getValue() - b.getValue());\n        const key = keys.findIndex(key => key === value) - 1;\n        const previousValue = keys[key];\n        if (previousValue === undefined) {\n            return null;\n        }\n        return input.get(value) - input.get(previousValue);\n    }\n\n    toString() {\n        return \"PreviousDifferenceExtractor\";\n    }\n}\n\nclass RankExtractor extends Extractor {\n    getOutput(input, value) {\n        let rank = 0;\n        for (const measure of input.values()) {\n            if (measure < input.get(value)) {\n                rank++;\n            }\n        }\n        return rank;\n    }\n\n    toString() {\n        return \"RankExtractor\";\n    }\n}\n\nclass InsightType {\n    getSignificance(F) {\n    }\n\n    getType() {\n    }\n}\n\nfunction calculateStandardDeviation(numbers, mean) {\n    let deviation = 0;\n    for (const number of numbers) {\n        deviation += Math.pow(number - mean, 2);\n    }\n    return Math.sqrt(deviation / numbers.length);\n}\n\nclass PointInsight extends InsightType {\n    getSignificance(F) {\n        let sortedValues = [...F.values()];\n        if (sortedValues.length < 2) {\n            return .0;\n        }\n        sortedValues.sort((a, b) => b - a);\n        const min = sortedValues[sortedValues.length - 1];\n        if (min <= 0) {\n            sortedValues = sortedValues.map(s => s - min + 0.1);\n        }\n\n        const [max] = sortedValues.splice(0, 1);\n        if (max === sortedValues[sortedValues.length - 1]) {\n            return .0;\n        }\n        const data = sortedValues.map((value, key) => [key + 2, value]);\n        const regressionResult = regression.power(data);\n\n        const intercept = regressionResult.equation[0];\n        const slope = regressionResult.equation[1];\n\n        if (isNaN(intercept) || isNaN(slope)) {\n            return .0;\n        }\n\n        const residuals = [];\n        for (let i = 0; i < sortedValues.length; i++) {\n            const predictedValue = intercept * Math.pow(i + 2, slope);\n            residuals.push(predictedValue);\n        }\n        const xMaxErr = max - intercept;\n        const meanResult = mean(residuals.length, residuals, 1);\n\n        let standardDeviation = calculateStandardDeviation(residuals, meanResult);\n        if (standardDeviation === 0) {\n            standardDeviation = Number.MIN_VALUE;\n        }\n\n        const normalDistribution = new Normal(meanResult, standardDeviation * 5);\n\n        return normalDistribution.cdf(xMaxErr);\n    }\n\n    getType() {\n        return \"Point\";\n    }\n}\n\nclass ShapeInsight extends InsightType {\n    constructor() {\n        super();\n        this.distribution = new Logistic(0.2, 2);\n    }\n    getSignificance(F) {\n        try {\n            const keys = [...F.keys()];\n            if (keys.length < 2) {\n                return .0;\n            }\n            keys.sort((a, b) => a.getValue() - b.getValue());\n            if (keys[0].getValue() === keys[keys.length - 1].getValue()) {\n                return .0;\n            }\n            const data = keys.map(key => [key.getValue(), F.get(key)]);\n            const regressionResult = regression.linear(data);\n            const slope = regressionResult.equation[0];\n            if (slope === 0) {\n                return 0;\n            }\n            const r2 = regressionResult.r2;\n\n            const prob = this.distribution.cdf(Math.abs(slope));\n            return prob * r2;\n        } catch (e) {\n            console.log(e);\n        }\n        return -0.1;\n    }\n\n    getType() {\n        return \"Shape\";\n    }\n}\n\nclass Attribution extends InsightType {\n    getSignificance(F) {\n        let sortedValues = [...F.values()];\n        if (sortedValues.length < 2) {\n            return .0;\n        }\n        sortedValues.sort((a, b) => b - a);\n        if (sortedValues[sortedValues.length - 1] < 0) {\n            return .0;\n        }\n        let sum = 0;\n        for (const value of sortedValues) {\n            sum += value;\n        }\n        if (sum === 0) {\n            return 0;\n        }\n\n        const max = sortedValues[0];\n        const percentage = max / sum;\n\n        const normalDistribution = new Normal(0.5, 0.25);\n        return normalDistribution.cdf(percentage);\n    }\n\n    getType() {\n        return \"Attribution\";\n    }\n}\n\nclass LastPointInsight extends InsightType {\n    getSignificance(F) {\n        let sortedValues = [...F.values()];\n        if (sortedValues.length < 2) {\n            return .0;\n        }\n        sortedValues.sort((a, b) => b - a);\n        const minVal = sortedValues[sortedValues.length - 1];\n        if (minVal <= 0) {\n            sortedValues = sortedValues.map(s => s - minVal + 0.1);\n        }\n\n        const [min] = sortedValues.splice(sortedValues.length - 1, 1);\n        if (min === sortedValues[0]) {\n            return .0;\n        }\n        const data = sortedValues.map((value, key) => [key + 2, value]);\n        const regressionResult = regression.power(data);\n\n        const intercept = regressionResult.equation[0];\n        const slope = regressionResult.equation[1];\n\n        if (isNaN(intercept) || isNaN(slope)) {\n            return .0;\n        }\n\n        const residuals = [];\n        for (let i = 0; i < sortedValues.length; i++) {\n            const predictedValue = intercept * Math.pow(i + 2, slope);\n            residuals.push(predictedValue);\n        }\n        const xMaxErr = min - intercept;\n        const meanResult = mean(residuals.length, residuals, 1);\n\n        let standardDeviation = calculateStandardDeviation(residuals, meanResult);\n        if (standardDeviation === 0) {\n            standardDeviation = Number.MIN_VALUE;\n        }\n\n        const normalDistribution = new Normal(meanResult, standardDeviation * 5);\n\n        return normalDistribution.cdf(xMaxErr);\n    }\n\n    getType() {\n        return \"LastPoint\";\n    }\n}\n\nclass TwoPointsInsight extends InsightType {\n    getSignificance(F) {\n        let sortedValues = [...F.values()];\n        if (sortedValues.length < 2) {\n            return .0;\n        }\n        sortedValues.sort((a, b) => b - a);\n\n        let sum = 0;\n        for (const value of sortedValues) {\n            sum += value;\n        }\n        if (sum === 0) {\n            return 0;\n        }\n        const max = sortedValues[0];\n        const max2 = sortedValues[1];\n        const percentage = (max + max2) / sum;\n        const normalDistribution = new Normal(0.5, 0.25);\n\n        return normalDistribution.cdf(percentage);\n    }\n\n    getType() {\n        return \"TwoPoints\";\n    }\n}\n\n\n\nclass Config {\n\n    static setExtractors(extractors) {\n        Config.extractors = extractors;\n    }\n\n    static setInsightTypes(insightsTypes) {\n        Config.insightTypes = insightsTypes;\n    }\n\n    static setAggregator(aggregator) {\n        Config.aggregator = aggregator;\n    }\n\n    static setExtractorByString(extractors) {\n        const extractorsSet = new Set(extractors);\n        const selected = [];\n        for (const extractor of Config.availableExtractors) {\n            if (extractorsSet.has(extractor.toString())) {\n                selected.push(extractor);\n            }\n        }\n        Config.setExtractors(selected);\n    }\n\n    static setInsightTypesByString(insightTypes) {\n        const insightTypesSet = new Set(insightTypes);\n        const selected = [];\n        for (const insightType of Config.availableInsightTypes) {\n            if (insightTypesSet.has(insightType.getType())) {\n                selected.push(insightType);\n            }\n        }\n        Config.setInsightTypes(selected);\n    }\n\n    static setAggregatorByString(aggregator) {\n        for (const aggregatorFunction of Config.availableAggregators) {\n            if (aggregatorFunction.toString() === aggregator) {\n                Config.setAggregator(aggregatorFunction);\n                return;\n            }\n        }\n    }\n}\nConfig.availableExtractors = [\n    new AverageDifferenceExtractor(),\n    new PercentageExtractor(),\n    new PreviousDifferenceExtractor(),\n    new RankExtractor()\n];\nConfig.availableInsightTypes = [\n    new PointInsight(),\n    new LastPointInsight(),\n    new Attribution(),\n    new TwoPointsInsight(),\n    new ShapeInsight()\n];\nConfig.availableAggregators = [\n    new SumAggregator(),\n    new MeanAggregator(),\n    new CountAggregator()\n];\nConfig.extractors = Config.availableExtractors;\nConfig.insightTypes = Config.availableInsightTypes;\nConfig.aggregator = Config.availableAggregators[0];\n\nclass ExtractorPair {\n    constructor(dimension, type) {\n        this.dimension = dimension;\n        this.type = type;\n    }\n\n    getDimension() {\n        return this.dimension;\n    }\n\n    getType() {\n        return this.type;\n    }\n}\n\n\nclass CompositeExtractor {\n\n    constructor({compositeExtractor, pair}) {\n        this.pairs = new Array(CompositeExtractor.t);\n        if (compositeExtractor) {\n            this.pairs = compositeExtractor.pairs.map(pair => {\n                if (pair) {\n                    return new ExtractorPair(pair.getDimension(), pair.getType());\n                }\n                return pair;\n            });\n        }\n        if (pair) {\n            this.pairs[0] = pair;\n        }\n    }\n\n    getPair(index) {\n        return this.pairs[index];\n    }\n\n\n    static makeCompositeExtractor(extractors, database, level, domainDimensions) {\n        if (level === this.t) {\n            return extractors;\n        }\n\n        const newExtractors = [];\n        for (const compositeExtractor of extractors) {\n            for (const extractor of Config.extractors) {\n                if (level > 1 && !extractor.isMeaningful(compositeExtractor.getPair(level - 1).getType())) {\n                    continue;\n                }\n                for (const dimension of domainDimensions) {\n                    if (extractor.satisfiesRequirements(database, dimension)) {\n                        const Ce = new CompositeExtractor({compositeExtractor});\n                        Ce.pairs[level] = new ExtractorPair(dimension, extractor);\n                        newExtractors.push(Ce);\n                    }\n                }\n            }\n        }\n\n        return CompositeExtractor.makeCompositeExtractor(newExtractors, database, level + 1, domainDimensions);\n    }\n\n    getAggregator(extractor) {\n        return extractor.getPair(0).getType();\n    }\n\n    static findCombinations(database, t) {\n        CompositeExtractor.t = t;\n        const domainDimensions = database.getDomainDimensions();\n        const measureDimension = database.getMeasureIndex();\n        const baseExtractor = [];\n        baseExtractor.push(new CompositeExtractor({pair: new ExtractorPair(measureDimension, Config.aggregator)}));\n\n        return CompositeExtractor.makeCompositeExtractor(baseExtractor, database, 1, domainDimensions);\n    }\n\n    static getAggregator(extractor) {\n        return extractor.getPair(0).getType();\n    }\n\n    toString(database) {\n        let s = \"<\";\n        for(let i = 0; i < CompositeExtractor.t; i++){\n            s += \"(\" + this.getPair(i).getType().toString() + \", \" + database.getDimensionName(this.getPair(i).getDimension()) + \")\";\n        }\n        s += \">\";\n        return s;\n    }\n}\nCompositeExtractor.t = 1;\n\nmodule.exports = {\n    DataType,\n    Aggregator,\n    SumAggregator,\n    CountAggregator,\n    MeanAggregator,\n    Extractor,\n    PercentageExtractor,\n    AverageDifferenceExtractor,\n    PreviousDifferenceExtractor,\n    RankExtractor,\n    InsightType,\n    PointInsight,\n    ShapeInsight,\n    Attribution,\n    LastPointInsight,\n    TwoPointsInsight,\n    Config,\n    ExtractorPair,\n    CompositeExtractor\n};\n","import React from \"react\";\nimport {Bar, Line} from \"react-chartjs-2\";\n\nfunction Graph({insight, siblingGroup, extractor, measureLabel, dimensions}) {\n\n    function generateData(data){\n        let result = {labels: [], data: []}\n        for(const [key, value] of Object.entries(data)){\n            result.labels.push(key);\n            result.data.push(value);\n        }\n        return result;\n    }\n    const set = generateData(insight.resultSet);\n\n\n    const data = {\n        labels: set.labels,\n        datasets: [\n            {\n                label: measureLabel,\n                data: set.data,\n                backgroundColor: [\n                    'rgba(255, 99, 132, 0.2)',\n                    'rgba(54, 162, 235, 0.2)',\n                    'rgba(255, 206, 86, 0.2)',\n                    'rgba(75, 192, 192, 0.2)',\n                    'rgba(153, 102, 255, 0.2)',\n                    'rgba(255, 159, 64, 0.2)',\n                ],\n                borderColor: [\n                    'rgba(255, 99, 132, 1)',\n                    'rgba(54, 162, 235, 1)',\n                    'rgba(255, 206, 86, 1)',\n                    'rgba(75, 192, 192, 1)',\n                    'rgba(153, 102, 255, 1)',\n                    'rgba(255, 159, 64, 1)',\n                ],\n                borderWidth: 2,\n            },\n        ],\n    };\n\n    const options = {\n\n    };\n\n    const getChart = () => {\n        if(insight.insightType === 'Shape'){\n            return (\n                <Line className=\"mainColor\" data={data} options={options}/>\n            )\n        } else {\n            return (\n                <Bar data={data} options={options}/>\n            )\n        }\n    }\n\n    return (\n        <div className=\"graphContainer\">\n            <h4>Type: {insight.insightType}</h4>\n            <h4>Sibling Group: SG({'<'}{siblingGroup.map((sg, key) => {\n                return (<span title={sg.title} key={key}>{sg.value + (key === siblingGroup.length -1 ? \"\" : \",\")}</span>)\n            })}{'>'}, {dimensions[insight.dimension]})</h4>\n            <h4>Extractor: {extractor}</h4>\n            <h4>Score: {insight.value}</h4>\n            <div className=\"chartContainer\">\n                {getChart()}\n            </div>\n\n        </div>\n    )\n}\n\nexport default Graph;","import React from \"react\";\n\nfunction Help() {\n    return (\n        <div className=\"openDialogContainer\">\n            <h1>Help</h1>\n            <h2>Extracting Top-K Insights from Multi-Dimensional Data</h2>\n            <h3>About</h3>\n            <p>\n                This project was created for my thesis.\n                The repository can be found <a href=\"https://github.com/Kinigopoulos/top-k-insights\" target=\"_blank\"\n                                               rel=\"noreferrer\">here!</a>\n            </p>\n            <h3>Executing the algorithm</h3>\n            <p>\n                To start off, make sure Apache Druid is running.<br/>\n                Also make sure that you have set up the correct ports and IPs for the server to connect with Druid.\n                <br/>\n                The default values are: <br/>\n                Broker: http://localhost:8082 <br/>\n                Coordinator: http://localhost:8081 <br/>\n                Router: http://localhost:8888 <br/>\n                Click the <i className=\"fa fa-cog\" aria-hidden=\"true\"/> Settings icon to change them if needed.\n            </p>\n            <h3>Parameters</h3>\n            <ul>\n                <li>\n                    <h4>DataSource Name</h4>\n                    Choose the input data which is stored in your Druid server. You need to add data there if you don't\n                    see any option.\n                </li>\n                <li>\n                    <h4>Domain Columns</h4>\n                    Choose the columns that you want to include for the extraction. You don't need to choose the\n                    measurement column here. <br/> Right of each included column you can select whether the column is\n                    ordinal.\n                    Ordinal columns are used to generate shape insights.\n                </li>\n                <li>\n                    <h4>Measure Column</h4>\n                    Choose the measure/value column of your data.\n                </li>\n                <li>\n                    <h4>Top-K Results</h4>\n                    The number of top insights to be extracted. Minimum: 1.\n                </li>\n                <li>\n                    <h4>τ-depth</h4>\n                    The depth of the composite extractors. Minimum: 1 uses only the aggregate function.\n                </li>\n                <li>\n                    <h4>Aggregator Function</h4>\n                    The aggregate function to be used for the measure column calculations.\n                </li>\n                <li>\n                    <h4>Extractors</h4>\n                    The type of extractors to extract data.\n                </li>\n                <li>\n                    <h4>Insight Types</h4>\n                    The types of insights to look up.\n                </li>\n                <li>\n                    <h4>Filters</h4>\n                    Exclude documents by defining a custom query to druid.\n                </li>\n                <ul>\n                    <li>Use <b>equals</b> to include only documents with the given property.</li>\n                    <li>Use <b>not equals</b> to exclude documents with the given property.</li>\n                </ul>\n                Use <button>+</button> to add more conditions.\n            </ul>\n            <p>When you are ready press the <button>Execute</button> button. Your results will get executed and presented.</p>\n        </div>\n    )\n}\n\nexport default Help;","import React, {useState} from \"react\";\nimport \"./WindowComponent.css\";\n\nfunction Settings({ports, setPorts, credentials, setCredentials}) {\n\n    const [settings, setSettings] = useState(ports || {});\n    const [localCredentials, setLocalCredentials] = useState(credentials || {});\n\n    function setPort(e) {\n        e.preventDefault();\n        const newSettings = {...settings, [e.target.name]: e.target.value};\n        setSettings(newSettings);\n    }\n\n    function setCredential(e) {\n        e.preventDefault();\n        const newSettings = {...localCredentials, [e.target.name]: e.target.value};\n        setLocalCredentials(newSettings);\n    }\n\n    function apply(e) {\n        e.preventDefault();\n        setPorts(settings);\n        setCredentials(localCredentials);\n        localStorage.setItem(\"ports\", JSON.stringify(settings));\n        localStorage.setItem(\"credentials\", JSON.stringify(localCredentials));\n        window.location.reload();\n    }\n\n    return (\n        <div className=\"openDialogContainer\">\n            <h1>Settings</h1>\n            <h2>Set Up Your Druid Ports</h2>\n            {\n                Object.entries(settings).map(([setting, value]) => {\n                    return (\n                        <div key={setting}>\n                            <span>{setting.toString()}</span>\n                            <input name={setting} type=\"text\" onChange={setPort} value={value}/>\n\n                        </div>\n                    )\n                })\n            }\n\n            <h2>Set Up Your Credentials</h2>\n            {\n                Object.entries(localCredentials).map(([setting, value]) => {\n                    return (\n                        <div key={setting}>\n                            <span>{setting.toString()}</span>\n                            <input name={setting} type={setting === \"password\" ? \"password\" : \"text\"} onChange={setCredential} value={value}/>\n\n                        </div>\n                    )\n                })\n            }\n            <button onClick={apply}>Apply</button>\n        </div>\n    )\n}\n\nexport default Settings;","import dataJSON from \"./SensorsAirPressure.json\";\nimport schema from \"./schemaData.json\";\nconst {TopKAlgorithm} = require(\"./topK/algorithm\");\n\nconst {__timeColumns, __timeColumnsFunctions} = require(\"../constants\");\n\nexport async function getDimensions() {\n    return new Promise((resolve, reject) => {\n        const result = {\n            data: Object.keys(dataJSON[0])\n        }\n\n        resolve(result);\n    });\n}\n\nfunction arrayToString(array) {\n    let res = \"\";\n    for (let i = 0; i < array.length; i++) {\n        res += array[i]\n        if (i !== array.length - 1) {\n            res += \",\";\n        }\n    }\n    return res;\n}\n\nexport async function runProgram(body) {\n\n    return new Promise((resolve, reject) => {\n        console.time(\"execution\");\n\n        const {options} = body;\n        const {\n            datasource,\n            columns,\n            ordinal,\n            measureColumn,\n            k,\n            t,\n            aggregator,\n            extractors,\n            insightTypes,\n            filters\n        } = options;\n\n\n        const queryColumns = columns;\n        const ordinalColumns = ordinal;\n\n        const index = queryColumns.indexOf(measureColumn);\n        if (index > -1) {\n            queryColumns.splice(index, 1);\n        }\n        // if (queryColumns.some(c => __timeColumns.includes(c))) {\n        //     queryColumns.push(\"__time\");\n        // }\n        const ordinalIndex = ordinalColumns.indexOf(measureColumn);\n        if (ordinalIndex > -1) {\n            ordinalColumns.splice(ordinalIndex, 1);\n        }\n\n        queryColumns.sort();\n        queryColumns.push(measureColumn);\n\n\n        try {\n\n\n            const result = dataJSON.map(row => {\n                const newRow = {};\n                for (const column of queryColumns) {\n                    if (__timeColumns.includes(column)) {\n                        newRow[column] = __timeColumnsFunctions[column](row.__time);\n                    } else {\n                        newRow[column] = row[column];\n                    }\n                }\n                return newRow;\n            });\n            console.log(result);\n            const totalRows = result.length;\n\n            const columnTypesResponse = {\n                data: schema.filter(entry => queryColumns.includes(entry.COLUMN_NAME))\n            };\n\n            queryColumns.forEach(column => {\n                if (__timeColumns.includes(column)) {\n                    columnTypesResponse.data.splice(columnTypesResponse.data.length - 2, 0, {\n                        COLUMN_NAME: column,\n                        DATA_TYPE: \"BIGINT\"\n                    });\n                }\n            });\n\n            const columns = columnTypesResponse.data\n                .filter(column => {\n                    return queryColumns.includes(column.COLUMN_NAME) && column.COLUMN_NAME && column.COLUMN_NAME !== \"__time\";\n                });\n\n            console.log(\"=== STARTING JS ALGORITHM ===\")\n\n            const topKAlgorithm = new TopKAlgorithm();\n            const insights = topKAlgorithm.initialize(result, columns, ordinalColumns, measureColumn, k, t, aggregator, extractors, insightTypes, datasource);\n\n            resolve({data: {result: insights, rows: totalRows, dimensions: columns.map(column => column.COLUMN_NAME)}});\n\n        } catch (err) {\n            console.log(err);\n            reject(err);\n        }\n    });\n}\n","import React, {useEffect, useState} from \"react\";\nimport axios from \"axios\";\nimport './App.css';\nimport Graph from \"./Graph\";\nimport Help from \"./Components/Help\";\nimport Settings from \"./Components/Settings\";\nimport {__timeColumns} from \"./constants\";\nimport {getDimensions, runProgram} from \"./Data/pseudoServer\";\n\nfunction App() {\n\n    const [druidRunning, setDruidRunning] = useState(true);\n    const [bypassDruid, setBypassDruid] = useState(true);\n    const [openDialog, setOpenDialog] = useState(0);\n    const [ports, setPorts] = useState(JSON.parse(localStorage.getItem(\"ports\")) || {\n        Broker: \"http://localhost:8082\",\n        Router: \"http://localhost:8888\"\n    });\n    const [credentials, setCredentials] = useState(JSON.parse(localStorage.getItem(\"credentials\")) || {\n        username: \"\",\n        password: \"\"\n    });\n    const getHeadersWithCredentials = () => {\n        const headers = {};\n        if (credentials.username && credentials.password) {\n            headers.username = credentials.username;\n            headers.password = credentials.password;\n        }\n        return headers;\n    };\n\n    const aggregators = [\"Sum\", \"Count\", \"Mean\"];\n    const defaultExtractors = [\n        \"PreviousDifferenceExtractor\",\n        \"RankExtractor\",\n        \"PercentageExtractor\",\n        \"AverageDifferenceExtractor\"\n    ];\n    const defaultInsightTypes = [\n        \"Point\",\n        \"Shape\",\n        \"Attribution\",\n        \"TwoPoints\",\n        \"LastPoint\"\n    ];\n    const filterTypes = [\n        \"equals\",\n        \"not equals\"\n    ];\n\n    function MainBody() {\n        const [dataSources, setDataSources] = useState([]);\n        const [columns, setColumns] = useState([]);\n        const [options, setOptions] = useState({\n            datasource: \"\",\n            columns: [],\n            ordinal: [],\n            measureColumn: \"\",\n            k: 1,\n            t: 1,\n            aggregator: aggregators[0],\n            extractors: [...defaultExtractors],\n            insightTypes: [...defaultInsightTypes.slice(0, 2)],\n            filters: []\n        });\n        const [isExecuting, setIsExecuting] = useState(false);\n        const [dimensions, setDimensions] = useState([]);\n        const [insights, setInsights] = useState([]);\n        const [numberOfRows, setNumberOfRows] = useState(-1);\n        const [selectedInsight, setSelectedInsight] = useState(-1);\n        const [loadedInsights, setLoadedInsights] = useState(false);\n\n        function loadInsights(data) {\n            const {columns, options, rows, dimensions, insights} = JSON.parse(data.toString());\n            setLoadedInsights(true);\n            setColumns(columns);\n            setOptions(options);\n            setNumberOfRows(rows);\n            setDimensions(dimensions);\n            setInsights(insights);\n        }\n\n        useEffect(() => {\n            // axios.get(\"/data-sources\", {params: {broker: ports.Broker}, headers: getHeadersWithCredentials()})\n            //     .then(res => {\n            //         setDataSources(res.data);\n            //     }).catch(err => {\n            //     setDruidRunning(false);\n            //     console.log(err);\n            // });\n\n            setDataSources([\"Sensors\"]);\n            setOptions(previousOptions => {return {...options, ...previousOptions, datasource: \"Sensors\"}});\n        }, []);\n\n        useEffect(() => {\n            if (loadedInsights) return;\n            const name = options.datasource;\n\n            // axios.get(\"/dimensions\", {\n            //     params: {broker: ports.Broker, datasource: name},\n            //     headers: getHeadersWithCredentials()\n            // })\n            getDimensions()\n                .then(res => {\n                    if (Array.isArray(res.data)) {\n                        const columns = res.data.map(column => {\n                            if (column === \"__time\") {\n                                return __timeColumns;\n                            }\n                            return column;\n                        }).flat();\n                        setColumns(columns);\n                    } else {\n                        setColumns([]);\n                    }\n                    setOptions(options => {\n                        return {...options, columns: [], ordinal: [], measureColumn: 'value'}\n                    });\n                })\n                .catch(err => {\n                    console.log(err);\n                });\n        }, [options.datasource, dataSources, loadedInsights])\n\n        function setOption(e) {\n            e.preventDefault();\n            if (e.target.name === 'datasource' && loadedInsights) {\n                setLoadedInsights(false);\n            }\n            setOptions({...options, [e.target.name]: e.target.value});\n        }\n\n        function setNumericOption(e) {\n            e.preventDefault();\n            setOptions({...options, [e.target.name]: parseInt(e.target.value)})\n        }\n\n        function toggleColumn(e) {\n            let newColumns = options.columns;\n            let newOrdinal = options.ordinal;\n            if (e.target.checked) {\n                newColumns.push(e.target.value);\n            } else {\n                const index = newColumns.indexOf(e.target.value);\n                if (index > -1) {\n                    newColumns.splice(index, 1);\n                }\n                const ordinalIndex = newOrdinal.indexOf(e.target.value);\n                if (ordinalIndex > -1) {\n                    newOrdinal.splice(ordinalIndex, 1);\n                }\n            }\n            setOptions({...options, columns: newColumns, ordinal: newOrdinal});\n        }\n\n        function toggleOrdinal(e) {\n            let newOrdinal = options[e.target.name];\n            if (e.target.checked) {\n                newOrdinal.push(e.target.value);\n            } else {\n                const ordinalIndex = newOrdinal.indexOf(e.target.value);\n                if (ordinalIndex > -1) {\n                    newOrdinal.splice(ordinalIndex, 1);\n                }\n            }\n            setOptions({...options, [e.target.name]: newOrdinal});\n        }\n\n        function addFilter(e) {\n            e.preventDefault();\n            setOptions({...options, filters: [...options.filters, {type: \"\", dimension: \"\", value: [\"\"]}]})\n        }\n\n        function setFilter(e) {\n            e.preventDefault();\n\n            const name = e.target.name.split('-')[0];\n            const id = Number.parseInt(e.target.name.split('-')[1]);\n\n            const newFilters = [...options.filters];\n            newFilters[id][name] = e.target.value;\n            setOptions({...options, filters: newFilters});\n        }\n\n        function setFilterValue(e) {\n            e.preventDefault();\n\n            const name = Number.parseInt(e.target.name.split('-')[0]);\n            const id = Number.parseInt(e.target.name.split('-')[1]);\n\n            const newFilters = [...options.filters];\n            newFilters[id].value[name] = e.target.value;\n            setOptions({...options, filters: newFilters});\n        }\n\n        function addFilterValue(e) {\n            e.preventDefault();\n            const id = Number.parseInt(e.target.name);\n            const value = Number.parseInt(e.target.value);\n            const newFilters = [...options.filters];\n\n            if (value === 0) {\n                newFilters[id].value.push(\"\");\n            } else if (value > 0) {\n                newFilters[id].value.splice(value, 1);\n            }\n\n\n            setOptions({...options, filters: newFilters});\n        }\n\n        function removeFilter(e) {\n            e.preventDefault();\n            const id = e.target.id;\n            const newFilters = [...options.filters];\n            newFilters.splice(id, 1);\n            setOptions({...options, filters: newFilters});\n        }\n\n        const ExecuteQuery = () => {\n            if (options.datasource === \"\") {\n                window.alert(\"Please choose a valid datasource\");\n                return;\n            } else if (options.columns.length === 0) {\n                window.alert(\"Domain columns' size cannot be 0\");\n                return;\n            } else if (options.measureColumn === \"\") {\n                window.alert(\"Please choose a valid measure column\");\n                return;\n            } else if (options.k <= 0) {\n                window.alert(\"K must be a positive number\");\n                return;\n            } else if (options.t <= 0) {\n                window.alert(\"τ must be a positive number\");\n                return;\n            } else if (options.extractors.length === 0) {\n                window.alert(\"Extractors' size cannot be 0\");\n                return;\n            } else if (options.insightTypes.length === 0) {\n                window.alert(\"Insight types' size cannot be 0\");\n                return;\n            }\n            setIsExecuting(true);\n            // axios.post(\"/run\", {\n            //     options: options,\n            //     ports: {broker: ports.Broker, router: ports.Router}\n            // }, {headers: getHeadersWithCredentials()})\n            runProgram({options})\n                .then(res => {\n                    console.log(res);\n                    console.log(res.data);\n                    setIsExecuting(false);\n                    setDimensions(res.data.dimensions);\n                    setInsights(res.data.result);\n                    setNumberOfRows(res.data.rows);\n                })\n                .catch(err => {\n                    console.log(err);\n                    console.log(err && err.response && err.response.data.message);\n                    window.alert(err && err.response && err.response.data.message);\n                    setIsExecuting(false);\n                    setInsights([]);\n                });\n        }\n\n        const extractorToString = data => {\n            const extractorSign = ex => {\n                switch (ex) {\n                    case 'PreviousDifferenceExtractor':\n                        return '∆prev'\n                    case 'RankExtractor':\n                        return 'Rank'\n                    case 'PercentageExtractor':\n                        return '%'\n                    case 'AverageDifferenceExtractor':\n                        return '∆avg'\n                    default:\n                        return ex;\n                }\n            }\n            let string = \"<\";\n            data.forEach((e, key) => {\n                let comma = \", \";\n                if (key === data.length - 1) {\n                    comma = \"\";\n                }\n\n                string += `(${extractorSign(e.type)}, ${dimensions[e.dimension]})${comma}`\n\n            })\n            string += \">\";\n            return string;\n        }\n\n        function changeSelectedInsight(key) {\n            if (selectedInsight === key) {\n                setSelectedInsight(-1);\n            } else {\n                setSelectedInsight(key);\n            }\n        }\n\n        const downloadFile = async () => {\n            const myData = {\n                columns: columns,\n                options: options,\n                rows: numberOfRows,\n                dimensions: dimensions,\n                insights: insights\n            };\n            const fileName = `${options.datasource}_insights_${Date.now()}`;\n\n            const json = JSON.stringify(myData);\n            const blob = new Blob([json], {type: 'application/json'});\n            const href = URL.createObjectURL(blob);\n            const link = document.createElement('a');\n            link.href = href;\n            link.download = fileName + \".json\";\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n        };\n\n        const showFile = async (e) => {\n            e.preventDefault()\n            const reader = new FileReader();\n            reader.onload = async (e) => {\n                loadInsights(e.target.result);\n            };\n            reader.readAsText(e.target.files[0]);\n        };\n\n        return (\n            <div className=\"mainBody\">\n                <div className=\"inputDataContainer\">\n                    <span>DataSource Name</span>\n                    <select name=\"datasource\" id=\"datasource\" onChange={setOption} value={options.datasource}>\n                        <option value=\"\">--- Select Source ---</option>\n                        {dataSources.map((dataSource, key) => {\n                            return (\n                                <option value={dataSource} key={key}>\n                                    {dataSource}\n                                </option>\n                            )\n                        })}\n                    </select>\n\n                    <div className=\"domainColumn\">\n                        <span>Domain Columns</span>\n                        <span>Ordinal</span>\n                    </div>\n\n                    {columns.length === 0 &&\n                    <>\n                        <br/>\n                        <span>Select a datasource first</span>\n                    </>\n                    }\n                    <form>\n                        {\n                            columns.map((column, key) => {\n                                return (\n                                    <div className={`domainColumn ${key % 2 && 'brighten'}`} key={key}>\n                                        <div>\n                                            <input type=\"checkbox\" onChange={toggleColumn}\n                                                   id={`columns${column}`}\n                                                   checked={options.columns.includes(column)}\n                                                   name=\"columns\" value={column}/>\n                                            &nbsp;\n                                            <label htmlFor={`columns${column}`}>{column}</label>\n                                        </div>\n                                        {options.columns.includes(column) &&\n                                        <div>\n                                            <input type=\"checkbox\" onChange={toggleOrdinal}\n                                                   name=\"ordinal\"\n                                                   value={column}\n                                            />\n                                        </div>\n                                        }\n\n                                    </div>\n                                )\n                            })\n                        }\n                    </form>\n                    <br/>\n\n                    <span className=\"mt-1\">Measure Column</span>\n                    <select name=\"measureColumn\" id=\"measureColumn\" onChange={setOption} value={options.measureColumn}>\n                        <option value={''}>--- Select Measurement ---</option>\n                        {columns.map((column, key) => {\n                            return (\n                                <option value={column} key={key}>\n                                    {column}\n                                </option>\n                            )\n                        })}\n                    </select>\n\n\n                    <span>Top-K Results</span>\n                    <input className=\"\" name=\"k\" type=\"number\" onChange={setNumericOption} value={options.k}/>\n\n                    <span>τ-depth</span>\n                    <input className=\"\" name=\"t\" type=\"number\" onChange={setNumericOption} value={options.t}/>\n\n                    <span className=\"mt-1\">Aggregator Function</span>\n                    <select name=\"aggregator\" id=\"aggregator\" onChange={setOption} value={options.aggregator}>\n                        {aggregators.map((column, key) => {\n                            return (\n                                <option value={column} key={key}>\n                                    {column}\n                                </option>\n                            )\n                        })}\n                    </select>\n\n                    <span>Extractors</span>\n                    <form>\n                        {\n                            defaultExtractors.map((column, key) => {\n                                return (\n                                    <div className={`${key % 2 && 'brighten'}`} key={key}>\n                                        <div>\n                                            <input type=\"checkbox\" onChange={toggleOrdinal}\n                                                   id={`extractor${column}`}\n                                                   checked={options.extractors.includes(column)}\n                                                   name=\"extractors\"\n                                                   value={column}/>\n                                            &nbsp;\n                                            <label htmlFor={`extractor${column}`}>{column}</label>\n                                        </div>\n                                    </div>\n                                )\n                            })\n                        }\n                    </form>\n                    <br/>\n\n                    <span>Insight Types</span>\n                    <form>\n                        {\n                            defaultInsightTypes.map((column, key) => {\n                                return (\n                                    <div className={`${key % 2 && 'brighten'}`} key={key}>\n                                        <div>\n                                            <input type=\"checkbox\" onChange={toggleOrdinal}\n                                                   id={`insightType${column}`}\n                                                   checked={options.insightTypes.includes(column)}\n                                                   name=\"insightTypes\"\n                                                   value={column}/>\n                                            &nbsp;\n                                            <label htmlFor={`insightType${column}`}>{column}</label>\n                                        </div>\n                                    </div>\n                                )\n                            })\n                        }\n                    </form>\n                    <br/>\n\n                    {/*<span>Filters</span>*/}\n                    {/*<form>*/}\n                    {/*    {*/}\n                    {/*        options.filters.map((filter, key) => {*/}\n                    {/*            return (*/}\n                    {/*                <React.Fragment key={key}>*/}\n                    {/*                    <span>Filter No. {key + 1} <span className=\"filterRemove\" onClick={removeFilter}*/}\n                    {/*                                                     id={key}>Remove</span></span>*/}\n                    {/*                    <div className=\"filterContainer\">*/}\n                    {/*                        <select onChange={setFilter} name={`dimension-${key}`}*/}\n                    {/*                                value={filter.dimension}>*/}\n                    {/*                            <option value={''}>--- Select Dimension ---</option>*/}\n                    {/*                            {columns.map((column, key) => {*/}\n                    {/*                                return (*/}\n                    {/*                                    <option value={column} key={key}>*/}\n                    {/*                                        {column}*/}\n                    {/*                                    </option>*/}\n                    {/*                                )*/}\n                    {/*                            })}*/}\n                    {/*                        </select>*/}\n\n                    {/*                        <select onChange={setFilter} className=\"filterType\" name={`type-${key}`}*/}\n                    {/*                                value={filter.type}>*/}\n                    {/*                            <option value={''}>--- Select Type ---</option>*/}\n                    {/*                            {filterTypes.map((type, key) => {*/}\n                    {/*                                return (*/}\n                    {/*                                    <option value={type} key={key}>*/}\n                    {/*                                        {type}*/}\n                    {/*                                    </option>*/}\n                    {/*                                )*/}\n                    {/*                            })}*/}\n                    {/*                        </select>*/}\n                    {/*                    </div>*/}\n                    {/*                    {*/}\n                    {/*                        filter.value.map((val, key2) => {*/}\n                    {/*                            return (*/}\n                    {/*                                <div className=\"filterValueContainer\" key={key2}>*/}\n                    {/*                                    <input className=\"filterValue\" name={`${key2}-${key}`}*/}\n                    {/*                                           onChange={setFilterValue}*/}\n                    {/*                                           value={val}/>*/}\n                    {/*                                    {*/}\n                    {/*                                        filter.type === \"equals\" && (key2 === 0 ?*/}\n                    {/*                                            <button className=\"addOrFilterButton\" value={key2}*/}\n                    {/*                                                    title=\"Add OR condition\" name={key}*/}\n                    {/*                                                    onClick={addFilterValue}>*/}\n                    {/*                                                <span style={{pointerEvents: \"none\"}}>+</span>*/}\n                    {/*                                            </button>*/}\n                    {/*                                            :*/}\n                    {/*                                            <button*/}\n                    {/*                                                className=\"addOrFilterButton removeOrFilterButton\"*/}\n                    {/*                                                value={key2} title=\"Remove OR condition\" name={key}*/}\n                    {/*                                                onClick={addFilterValue}>*/}\n                    {/*                                                <span style={{pointerEvents: \"none\"}}>-</span>*/}\n                    {/*                                            </button>)*/}\n                    {/*                                    }*/}\n                    {/*                                </div>*/}\n                    {/*                            )*/}\n                    {/*                        })*/}\n                    {/*                    }*/}\n                    {/*                </React.Fragment>*/}\n                    {/*            )*/}\n                    {/*        })*/}\n                    {/*    }*/}\n                    {/*    <button onClick={addFilter} title=\"Add a filter\">+</button>*/}\n                    {/*</form>*/}\n                    <br/>\n\n                    <button onClick={ExecuteQuery}>Execute</button>\n                </div>\n\n                <div className=\"resultsContainer\">\n                    {isExecuting && <h1>Loading</h1>}\n                    <div style={{\n                        display: \"flex\", justifyContent: \"space-between\",\n                        alignItems: \"center\", marginBottom: \"0.4rem\"\n                    }}>\n                        {\n                            numberOfRows > 0 ?\n                                <>\n                                    <h3 style={{margin: 0}}>Number of documents/rows: {numberOfRows}</h3>\n                                    <button style={{margin: 0}} onClick={downloadFile}>\n                                        <i className=\"fa fa-download\"/> Save insights\n                                    </button>\n                                </>\n                                :\n                                <>\n                                    <div/>\n                                    <button style={{margin: 0}}\n                                            onClick={() => document.getElementById('fileOpen').click()}>\n                                        <i className=\"fa fa-upload\"/> Load insights\n                                    </button>\n\n                                    <input type=\"file\" id=\"fileOpen\" onChange={showFile} style={{display: \"none\"}}/>\n                                </>\n                        }\n                    </div>\n                    {insights.length > 0 &&\n                    <div>\n                        <div className=\"insightRow\" style={{marginBottom: \"0.2rem\"}}>\n                            <span className=\"insightCell\" style={{flexShrink: 1.37}}>No.</span>\n                            <span className=\"insightCell\" style={{flexShrink: 1.29}}>Insight Type</span>\n                            <span className=\"insightCell\">Sibling Group</span>\n                            <span className=\"insightCell\">Extractor</span>\n                            <span className=\"insightCell\">Score</span>\n                        </div>\n                        {\n                            insights.map((insight, key) => {\n                                const siblingGroup = [];\n                                insight.subspace.forEach((dim, key) => {\n                                    siblingGroup.push({title: dimensions[key], value: dim === null ? \"*\" : dim});\n                                });\n                                let extractorString = extractorToString(insight.extractor);\n\n                                return (\n                                    <React.Fragment key={key}>\n                                        <div className=\"insightRow insightRowObj\"\n                                             onClick={() => changeSelectedInsight(key)}>\n\n                                            <span className=\"insightCell\" style={{flexShrink: 1.37}}>\n                                                {key + 1}.\n                                            </span>\n\n                                            <span className=\"insightCell\" style={{flexShrink: 1.29}}>\n                                                {insight.insightType}\n                                            </span>\n\n                                            <span className=\"insightCell\">\n                                                SG({'<'}{siblingGroup.map((sg, key) => {\n                                                return (<span title={sg.title} key={key}>{sg.value + (key === siblingGroup.length -1 ? \"\" : \",\")}</span>)\n                                            })}{'>'}, {dimensions[insight.dimension]})\n                                            </span>\n\n                                            <span className=\"insightCell\">\n                                                {extractorString}\n                                            </span>\n\n                                            <span className=\"insightCell\">\n                                                {(Math.round(insight.value * 100) / 100).toFixed(3)}\n                                            </span>\n\n                                        </div>\n                                        {\n                                            selectedInsight === key &&\n                                            <Graph insight={insight}\n                                                   siblingGroup={siblingGroup}\n                                                   extractor={extractorString}\n                                                   measureLabel={options.measureColumn}\n                                                   dimensions={dimensions}/>\n                                        }\n                                    </React.Fragment>\n                                )\n                            })\n                        }\n                    </div>\n                    }\n                </div>\n            </div>\n        );\n    }\n\n    function ErrorMessage({setBypassDruid}) {\n        return (\n            <div className=\"errorMessage\">\n                <span className=\"errorMessageText\">\n                    Make sure that your Druid server is running and refresh the page!\n                </span>\n                <button className=\"errorMessageButton\" onClick={() => setBypassDruid(true)}>Run saved insights</button>\n            </div>\n        );\n    }\n\n    function WindowComponent({children}) {\n        return (\n            <div className=\"windowDialog\" key=\"WindowComponent\">\n                <div className=\"windowDialogCloseContainer\" onClick={() => setOpenDialog(0)}>\n                    <i className=\"fa fa-times windowDialogClose\" aria-hidden=\"true\"/>\n                </div>\n                {children}\n            </div>\n        )\n    }\n\n    return (\n        <div className=\"mainContainer\">\n            <header className=\"header\">\n                <span className=\"headerTitle\">Top-K Insights Extractor</span>\n                <div style={{display: \"flex\", marginRight: \"2rem\"}}>\n                    <div className=\"headerHelpIcon\" onClick={() => setOpenDialog(2)}>\n                        <i className=\"fa fa-cog\" aria-hidden=\"true\"/>\n                    </div>\n\n                    <div className=\"headerHelpIcon\" onClick={() => setOpenDialog(1)}>\n                        <i className=\"fa fa-question-circle\" aria-hidden=\"true\"/>\n                    </div>\n                </div>\n            </header>\n\n            {openDialog === 1 && <WindowComponent children={<Help/>}/>}\n            {openDialog === 2 && <WindowComponent\n                children={<Settings ports={ports} setPorts={setPorts} credentials={credentials}\n                                    setCredentials={setCredentials}/>}/>}\n\n            <div className={`mainBody ${openDialog !== 0 && \"disabledMainBody\"}`}>\n                {(druidRunning || bypassDruid) ? <MainBody/> : <ErrorMessage setBypassDruid={setBypassDruid}/>}\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);","exports.__timeColumns = [\n    \"__time_Year\",\n    \"__time_Month\",\n    \"__time_Day\",\n    \"__time_DayOfWeek\",\n    \"__time_Hour\",\n    \"__time_Minute\",\n    \"__time_Second\"\n];\n\nexports.__timeColumnsFunctions = {\n    \"__time_Year\": (timestamp) => {\n        return new Date(timestamp).getFullYear();\n    },\n    \"__time_Month\": (timestamp) => {\n        return new Date(timestamp).getMonth();\n    },\n    \"__time_Day\": (timestamp) => {\n        return new Date(timestamp).getDate();\n    },\n    \"__time_DayOfWeek\": (timestamp) => {\n        return new Date(timestamp).getDay();\n    },\n    \"__time_Hour\": (timestamp) => {\n        return new Date(timestamp).getHours();\n    },\n    \"__time_Minute\": (timestamp) => {\n        return new Date(timestamp).getMinutes();\n    },\n    \"__time_Second\": (timestamp) => {\n        return new Date(timestamp).getSeconds();\n    }\n}"],"sourceRoot":""}